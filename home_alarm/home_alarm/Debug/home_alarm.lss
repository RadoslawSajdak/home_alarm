
home_alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080012c  0080012c  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000924f  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c3c  00000000  00000000  00009e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cac  00000000  00000000  0000badb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  0000d788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002247  00000000  00000000  0000e060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034a1  00000000  00000000  000102a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  00013748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_1>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_3>
  10:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_3>
  14:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_3>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_18>
  4c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	a2 01       	movw	r20, r4
  6a:	01 04       	cpc	r0, r1

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e8 e2       	ldi	r30, 0x28	; 40
  80:	f8 e0       	ldi	r31, 0x08	; 8
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 32       	cpi	r26, 0x2C	; 44
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	22 e0       	ldi	r18, 0x02	; 2
  90:	ac e2       	ldi	r26, 0x2C	; 44
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a5 31       	cpi	r26, 0x15	; 21
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 0c 04 	call	0x818	; 0x818 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 a7 03 	call	0x74e	; 0x74e <main>
  b8:	0c 94 12 04 	jmp	0x824	; 0x824 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
  c0:	fc 01       	movw	r30, r24
  c2:	91 8d       	ldd	r25, Z+25	; 0x19
  c4:	22 8d       	ldd	r18, Z+26	; 0x1a
  c6:	89 2f       	mov	r24, r25
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	80 5c       	subi	r24, 0xC0	; 192
  cc:	9f 4f       	sbci	r25, 0xFF	; 255
  ce:	82 1b       	sub	r24, r18
  d0:	91 09       	sbc	r25, r1
  d2:	8f 73       	andi	r24, 0x3F	; 63
  d4:	99 27       	eor	r25, r25
  d6:	08 95       	ret

000000d8 <_ZN14HardwareSerial4peekEv>:
  d8:	fc 01       	movw	r30, r24
  da:	91 8d       	ldd	r25, Z+25	; 0x19
  dc:	82 8d       	ldd	r24, Z+26	; 0x1a
  de:	98 17       	cp	r25, r24
  e0:	31 f0       	breq	.+12     	; 0xee <_ZN14HardwareSerial4peekEv+0x16>
  e2:	82 8d       	ldd	r24, Z+26	; 0x1a
  e4:	e8 0f       	add	r30, r24
  e6:	f1 1d       	adc	r31, r1
  e8:	85 8d       	ldd	r24, Z+29	; 0x1d
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	08 95       	ret

000000f4 <_ZN14HardwareSerial4readEv>:
  f4:	fc 01       	movw	r30, r24
  f6:	91 8d       	ldd	r25, Z+25	; 0x19
  f8:	82 8d       	ldd	r24, Z+26	; 0x1a
  fa:	98 17       	cp	r25, r24
  fc:	61 f0       	breq	.+24     	; 0x116 <_ZN14HardwareSerial4readEv+0x22>
  fe:	82 8d       	ldd	r24, Z+26	; 0x1a
 100:	df 01       	movw	r26, r30
 102:	a8 0f       	add	r26, r24
 104:	b1 1d       	adc	r27, r1
 106:	5d 96       	adiw	r26, 0x1d	; 29
 108:	8c 91       	ld	r24, X
 10a:	92 8d       	ldd	r25, Z+26	; 0x1a
 10c:	9f 5f       	subi	r25, 0xFF	; 255
 10e:	9f 73       	andi	r25, 0x3F	; 63
 110:	92 8f       	std	Z+26, r25	; 0x1a
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	9f ef       	ldi	r25, 0xFF	; 255
 11a:	08 95       	ret

0000011c <_ZN14HardwareSerial17availableForWriteEv>:
 11c:	fc 01       	movw	r30, r24
 11e:	23 8d       	ldd	r18, Z+27	; 0x1b
 120:	34 8d       	ldd	r19, Z+28	; 0x1c
 122:	23 17       	cp	r18, r19
 124:	38 f0       	brcs	.+14     	; 0x134 <_ZN14HardwareSerial17availableForWriteEv+0x18>
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	82 1b       	sub	r24, r18
 12c:	91 09       	sbc	r25, r1
 12e:	83 0f       	add	r24, r19
 130:	91 1d       	adc	r25, r1
 132:	08 95       	ret
 134:	83 2f       	mov	r24, r19
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	82 1b       	sub	r24, r18
 13a:	91 09       	sbc	r25, r1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 140:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 142:	84 8d       	ldd	r24, Z+28	; 0x1c
 144:	df 01       	movw	r26, r30
 146:	a8 0f       	add	r26, r24
 148:	b1 1d       	adc	r27, r1
 14a:	a3 5a       	subi	r26, 0xA3	; 163
 14c:	bf 4f       	sbci	r27, 0xFF	; 255
 14e:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 150:	24 8d       	ldd	r18, Z+28	; 0x1c
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	2f 73       	andi	r18, 0x3F	; 63
 15a:	30 78       	andi	r19, 0x80	; 128
 15c:	33 23       	and	r19, r19
 15e:	34 f4       	brge	.+12     	; 0x16c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 160:	21 50       	subi	r18, 0x01	; 1
 162:	31 09       	sbc	r19, r1
 164:	20 6c       	ori	r18, 0xC0	; 192
 166:	3f 6f       	ori	r19, 0xFF	; 255
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 16e:	a6 89       	ldd	r26, Z+22	; 0x16
 170:	b7 89       	ldd	r27, Z+23	; 0x17
 172:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 174:	a0 89       	ldd	r26, Z+16	; 0x10
 176:	b1 89       	ldd	r27, Z+17	; 0x11
 178:	8c 91       	ld	r24, X
 17a:	83 70       	andi	r24, 0x03	; 3
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 180:	93 8d       	ldd	r25, Z+27	; 0x1b
 182:	84 8d       	ldd	r24, Z+28	; 0x1c
 184:	98 13       	cpse	r25, r24
 186:	06 c0       	rjmp	.+12     	; 0x194 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 188:	02 88       	ldd	r0, Z+18	; 0x12
 18a:	f3 89       	ldd	r31, Z+19	; 0x13
 18c:	e0 2d       	mov	r30, r0
 18e:	80 81       	ld	r24, Z
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 19c:	88 8d       	ldd	r24, Y+24	; 0x18
 19e:	88 23       	and	r24, r24
 1a0:	d9 f0       	breq	.+54     	; 0x1d8 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 1a2:	ea 89       	ldd	r30, Y+18	; 0x12
 1a4:	fb 89       	ldd	r31, Y+19	; 0x13
 1a6:	80 81       	ld	r24, Z
 1a8:	85 fd       	sbrc	r24, 5
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <_ZN14HardwareSerial5flushEv+0x20>
 1ac:	a8 89       	ldd	r26, Y+16	; 0x10
 1ae:	b9 89       	ldd	r27, Y+17	; 0x11
 1b0:	8c 91       	ld	r24, X
 1b2:	86 fd       	sbrc	r24, 6
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	f5 cf       	rjmp	.-22     	; 0x1a6 <_ZN14HardwareSerial5flushEv+0x10>
 1bc:	80 81       	ld	r24, Z
 1be:	85 ff       	sbrs	r24, 5
 1c0:	f2 cf       	rjmp	.-28     	; 0x1a6 <_ZN14HardwareSerial5flushEv+0x10>
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 a0 00 	call	0x140	; 0x140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 1ca:	eb cf       	rjmp	.-42     	; 0x1a2 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 1cc:	a8 89       	ldd	r26, Y+16	; 0x10
 1ce:	b9 89       	ldd	r27, Y+17	; 0x11
 1d0:	8c 91       	ld	r24, X
 1d2:	85 ff       	sbrs	r24, 5
 1d4:	e8 cf       	rjmp	.-48     	; 0x1a6 <_ZN14HardwareSerial5flushEv+0x10>
 1d6:	f6 cf       	rjmp	.-20     	; 0x1c4 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
  _written = true;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1f0:	98 13       	cpse	r25, r24
 1f2:	26 c0       	rjmp	.+76     	; 0x240 <_ZN14HardwareSerial5writeEh+0x62>
 1f4:	e8 89       	ldd	r30, Y+16	; 0x10
 1f6:	f9 89       	ldd	r31, Y+17	; 0x11
 1f8:	80 81       	ld	r24, Z
 1fa:	85 fd       	sbrc	r24, 5
 1fc:	32 c0       	rjmp	.+100    	; 0x262 <_ZN14HardwareSerial5writeEh+0x84>
 1fe:	20 c0       	rjmp	.+64     	; 0x240 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 200:	8c 8d       	ldd	r24, Y+28	; 0x1c
 202:	18 13       	cpse	r17, r24
 204:	0c c0       	rjmp	.+24     	; 0x21e <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	07 fc       	sbrc	r0, 7
 20a:	fa cf       	rjmp	.-12     	; 0x200 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 20c:	e8 89       	ldd	r30, Y+16	; 0x10
 20e:	f9 89       	ldd	r31, Y+17	; 0x11
 210:	80 81       	ld	r24, Z
 212:	85 ff       	sbrs	r24, 5
 214:	f5 cf       	rjmp	.-22     	; 0x200 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
 216:	ce 01       	movw	r24, r28
 218:	0e 94 a0 00 	call	0x140	; 0x140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 21c:	f1 cf       	rjmp	.-30     	; 0x200 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 21e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 220:	fe 01       	movw	r30, r28
 222:	e8 0f       	add	r30, r24
 224:	f1 1d       	adc	r31, r1
 226:	e3 5a       	subi	r30, 0xA3	; 163
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 22c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 22e:	f8 94       	cli
    _tx_buffer_head = i;
 230:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 232:	ea 89       	ldd	r30, Y+18	; 0x12
 234:	fb 89       	ldd	r31, Y+19	; 0x13
 236:	80 81       	ld	r24, Z
 238:	80 62       	ori	r24, 0x20	; 32
 23a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 23c:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
 23e:	1d c0       	rjmp	.+58     	; 0x27a <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 240:	2b 8d       	ldd	r18, Y+27	; 0x1b
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	2f 5f       	subi	r18, 0xFF	; 255
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	2f 73       	andi	r18, 0x3F	; 63
 24a:	30 78       	andi	r19, 0x80	; 128
 24c:	33 23       	and	r19, r19
 24e:	34 f4       	brge	.+12     	; 0x25c <_ZN14HardwareSerial5writeEh+0x7e>
 250:	21 50       	subi	r18, 0x01	; 1
 252:	31 09       	sbc	r19, r1
 254:	20 6c       	ori	r18, 0xC0	; 192
 256:	3f 6f       	ori	r19, 0xFF	; 255
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	06 2f       	mov	r16, r22
 25e:	12 2f       	mov	r17, r18
 260:	cf cf       	rjmp	.-98     	; 0x200 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 262:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 264:	f8 94       	cli
      *_udr = c;
 266:	ee 89       	ldd	r30, Y+22	; 0x16
 268:	ff 89       	ldd	r31, Y+23	; 0x17
 26a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 26c:	e8 89       	ldd	r30, Y+16	; 0x10
 26e:	f9 89       	ldd	r31, Y+17	; 0x11
 270:	80 81       	ld	r24, Z
 272:	83 70       	andi	r24, 0x03	; 3
 274:	80 64       	ori	r24, 0x40	; 64
 276:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 278:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
 2a0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end+0x10>
 2a4:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__data_end+0x11>
 2a8:	80 81       	ld	r24, Z
 2aa:	82 fd       	sbrc	r24, 2
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <__vector_18+0x4e>
 2ae:	ec e2       	ldi	r30, 0x2C	; 44
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	a6 89       	ldd	r26, Z+22	; 0x16
 2b4:	b7 89       	ldd	r27, Z+23	; 0x17
 2b6:	2c 91       	ld	r18, X
 2b8:	81 8d       	ldd	r24, Z+25	; 0x19
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	8f 73       	andi	r24, 0x3F	; 63
 2be:	92 8d       	ldd	r25, Z+26	; 0x1a
 2c0:	89 17       	cp	r24, r25
 2c2:	71 f0       	breq	.+28     	; 0x2e0 <__vector_18+0x58>
 2c4:	df 01       	movw	r26, r30
 2c6:	e1 8d       	ldd	r30, Z+25	; 0x19
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e4 5d       	subi	r30, 0xD4	; 212
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	25 8f       	std	Z+29, r18	; 0x1d
 2d0:	59 96       	adiw	r26, 0x19	; 25
 2d2:	8c 93       	st	X, r24
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <__vector_18+0x58>
 2d6:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end+0x16>
 2da:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x17>
 2de:	80 81       	ld	r24, Z
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_19>:
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
 31a:	8c e2       	ldi	r24, 0x2C	; 44
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 a0 00 	call	0x140	; 0x140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 344:	ec e2       	ldi	r30, 0x2C	; 44
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	13 82       	std	Z+3, r1	; 0x03
 34a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 34c:	88 ee       	ldi	r24, 0xE8	; 232
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	a0 e0       	ldi	r26, 0x00	; 0
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	84 83       	std	Z+4, r24	; 0x04
 356:	95 83       	std	Z+5, r25	; 0x05
 358:	a6 83       	std	Z+6, r26	; 0x06
 35a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	91 83       	std	Z+1, r25	; 0x01
 362:	80 83       	st	Z, r24
 364:	85 ec       	ldi	r24, 0xC5	; 197
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	95 87       	std	Z+13, r25	; 0x0d
 36a:	84 87       	std	Z+12, r24	; 0x0c
 36c:	84 ec       	ldi	r24, 0xC4	; 196
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	97 87       	std	Z+15, r25	; 0x0f
 372:	86 87       	std	Z+14, r24	; 0x0e
 374:	80 ec       	ldi	r24, 0xC0	; 192
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	91 8b       	std	Z+17, r25	; 0x11
 37a:	80 8b       	std	Z+16, r24	; 0x10
 37c:	81 ec       	ldi	r24, 0xC1	; 193
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	93 8b       	std	Z+19, r25	; 0x13
 382:	82 8b       	std	Z+18, r24	; 0x12
 384:	82 ec       	ldi	r24, 0xC2	; 194
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	95 8b       	std	Z+21, r25	; 0x15
 38a:	84 8b       	std	Z+20, r24	; 0x14
 38c:	86 ec       	ldi	r24, 0xC6	; 198
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	97 8b       	std	Z+23, r25	; 0x17
 392:	86 8b       	std	Z+22, r24	; 0x16
 394:	11 8e       	std	Z+25, r1	; 0x19
 396:	12 8e       	std	Z+26, r1	; 0x1a
 398:	13 8e       	std	Z+27, r1	; 0x1b
 39a:	14 8e       	std	Z+28, r1	; 0x1c
 39c:	08 95       	ret

0000039e <_ZN7PCF8574C1Eh>:
void PCF8574::digitalRead(uint8_t address, uint8_t size)
{
	twi_start();
	_PIN = twi_read_byte(1);
	twi_stop();
}
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
 3a4:	19 82       	std	Y+1, r1	; 0x01
 3a6:	1a 82       	std	Y+2, r1	; 0x02
 3a8:	1b 82       	std	Y+3, r1	; 0x03
 3aa:	68 83       	st	Y, r22
 3ac:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z9twi_startv>
 3b0:	88 81       	ld	r24, Y
 3b2:	88 0f       	add	r24, r24
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	0e 94 86 03 	call	0x70c	; 0x70c <_Z13twi_read_byteh>
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	0e 94 95 03 	call	0x72a	; 0x72a <_Z8twi_stopv>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <_ZN7PCF857410updateGPIOEv>:
void PCF8574::updateGPIO()
{
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
	uint8_t value = (_PIN & ~_DDR) | _PORT;
 3ce:	1b 81       	ldd	r17, Y+3	; 0x03
 3d0:	10 95       	com	r17
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	18 23       	and	r17, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	18 2b       	or	r17, r24
	
	twi_start();
 3da:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z9twi_startv>
	twi_write_byte(_address << 1);
 3de:	88 81       	ld	r24, Y
 3e0:	88 0f       	add	r24, r24
 3e2:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z14twi_write_byteh>
	twi_write_byte(value);
 3e6:	81 2f       	mov	r24, r17
 3e8:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z14twi_write_byteh>
	twi_stop();
 3ec:	0e 94 95 03 	call	0x72a	; 0x72a <_Z8twi_stopv>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	08 95       	ret

000003f8 <_ZN7PCF85747pinModeEhh>:
	twi_stop();
}
void PCF8574::pinMode(uint8_t pin, uint8_t mode)
{
	/* Switch according mode */
	switch (mode) {
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	29 f1       	breq	.+74     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3fc:	18 f0       	brcs	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	42 30       	cpi	r20, 0x02	; 2
 400:	89 f0       	breq	.+34     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 402:	30 c0       	rjmp	.+96     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		case INPUT:
		_DDR &= ~(1 << pin);
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	20 95       	com	r18
 414:	fc 01       	movw	r30, r24
 416:	33 81       	ldd	r19, Z+3	; 0x03
 418:	32 23       	and	r19, r18
 41a:	33 83       	std	Z+3, r19	; 0x03
		_PORT &= ~(1 << pin);
 41c:	32 81       	ldd	r19, Z+2	; 0x02
 41e:	23 23       	and	r18, r19
 420:	22 83       	std	Z+2, r18	; 0x02
		break;
 422:	20 c0       	rjmp	.+64     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		case INPUT_PULLUP:
		_DDR &= ~(1 << pin);
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	32 2f       	mov	r19, r18
 434:	30 95       	com	r19
 436:	fc 01       	movw	r30, r24
 438:	43 81       	ldd	r20, Z+3	; 0x03
 43a:	34 23       	and	r19, r20
 43c:	33 83       	std	Z+3, r19	; 0x03
		_PORT |= (1 << pin);
 43e:	32 81       	ldd	r19, Z+2	; 0x02
 440:	23 2b       	or	r18, r19
 442:	22 83       	std	Z+2, r18	; 0x02
		break;
 444:	0f c0       	rjmp	.+30     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		case OUTPUT:
		_DDR |= (1 << pin);
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	fc 01       	movw	r30, r24
 456:	33 81       	ldd	r19, Z+3	; 0x03
 458:	32 2b       	or	r19, r18
 45a:	33 83       	std	Z+3, r19	; 0x03
		_PORT &= ~(1 << pin);
 45c:	20 95       	com	r18
 45e:	32 81       	ldd	r19, Z+2	; 0x02
 460:	23 23       	and	r18, r19
 462:	22 83       	std	Z+2, r18	; 0x02
		default:
		break;
	}

	/* Update GPIO values */
	updateGPIO();
 464:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN7PCF857410updateGPIOEv>
 468:	08 95       	ret

0000046a <_ZN7PCF857412digitalWriteEhh>:
}
void PCF8574::digitalWrite(uint8_t pin, uint8_t value) {

	/* Set PORT bit value */
	if (value)
 46a:	44 23       	and	r20, r20
 46c:	61 f0       	breq	.+24     	; 0x486 <_ZN7PCF857412digitalWriteEhh+0x1c>
	_PORT |= (1 << pin);
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <_ZN7PCF857412digitalWriteEhh+0xe>
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <_ZN7PCF857412digitalWriteEhh+0xa>
 47c:	fc 01       	movw	r30, r24
 47e:	32 81       	ldd	r19, Z+2	; 0x02
 480:	23 2b       	or	r18, r19
 482:	22 83       	std	Z+2, r18	; 0x02
 484:	0c c0       	rjmp	.+24     	; 0x49e <_ZN7PCF857412digitalWriteEhh+0x34>
	else
	_PORT &= ~(1 << pin);
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <_ZN7PCF857412digitalWriteEhh+0x26>
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <_ZN7PCF857412digitalWriteEhh+0x22>
 494:	20 95       	com	r18
 496:	fc 01       	movw	r30, r24
 498:	32 81       	ldd	r19, Z+2	; 0x02
 49a:	23 23       	and	r18, r19
 49c:	22 83       	std	Z+2, r18	; 0x02

	/* Update GPIO values */
	updateGPIO();
 49e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN7PCF857410updateGPIOEv>
 4a2:	08 95       	ret

000004a4 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 4a4:	cf 92       	push	r12
 4a6:	df 92       	push	r13
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	41 15       	cp	r20, r1
 4b6:	51 05       	cpc	r21, r1
 4b8:	c1 f0       	breq	.+48     	; 0x4ea <_ZN5Print5writeEPKhj+0x46>
 4ba:	6a 01       	movw	r12, r20
 4bc:	8c 01       	movw	r16, r24
 4be:	e6 2e       	mov	r14, r22
 4c0:	f7 2e       	mov	r15, r23
 4c2:	c0 e0       	ldi	r28, 0x00	; 0
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	d7 01       	movw	r26, r14
 4c8:	6d 91       	ld	r22, X+
 4ca:	7d 01       	movw	r14, r26
 4cc:	d8 01       	movw	r26, r16
 4ce:	ed 91       	ld	r30, X+
 4d0:	fc 91       	ld	r31, X
 4d2:	01 90       	ld	r0, Z+
 4d4:	f0 81       	ld	r31, Z
 4d6:	e0 2d       	mov	r30, r0
 4d8:	c8 01       	movw	r24, r16
 4da:	09 95       	icall
 4dc:	89 2b       	or	r24, r25
 4de:	39 f0       	breq	.+14     	; 0x4ee <_ZN5Print5writeEPKhj+0x4a>
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	cc 16       	cp	r12, r28
 4e4:	dd 06       	cpc	r13, r29
 4e6:	79 f7       	brne	.-34     	; 0x4c6 <_ZN5Print5writeEPKhj+0x22>
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <_ZN5Print5writeEPKhj+0x4a>
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
 4ee:	ce 01       	movw	r24, r28
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	ef 90       	pop	r14
 4fc:	df 90       	pop	r13
 4fe:	cf 90       	pop	r12
 500:	08 95       	ret

00000502 <_ZN5Print5printEPKc>:
 502:	61 15       	cp	r22, r1
 504:	71 05       	cpc	r23, r1
 506:	81 f0       	breq	.+32     	; 0x528 <_ZN5Print5printEPKc+0x26>
 508:	fb 01       	movw	r30, r22
 50a:	01 90       	ld	r0, Z+
 50c:	00 20       	and	r0, r0
 50e:	e9 f7       	brne	.-6      	; 0x50a <_ZN5Print5printEPKc+0x8>
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	af 01       	movw	r20, r30
 514:	46 1b       	sub	r20, r22
 516:	57 0b       	sbc	r21, r23
 518:	dc 01       	movw	r26, r24
 51a:	ed 91       	ld	r30, X+
 51c:	fc 91       	ld	r31, X
 51e:	02 80       	ldd	r0, Z+2	; 0x02
 520:	f3 81       	ldd	r31, Z+3	; 0x03
 522:	e0 2d       	mov	r30, r0
 524:	09 95       	icall
 526:	08 95       	ret
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	08 95       	ret

0000052e <_ZN5Print7printlnEv>:
 52e:	dc 01       	movw	r26, r24
 530:	ed 91       	ld	r30, X+
 532:	fc 91       	ld	r31, X
 534:	02 80       	ldd	r0, Z+2	; 0x02
 536:	f3 81       	ldd	r31, Z+3	; 0x03
 538:	e0 2d       	mov	r30, r0
 53a:	42 e0       	ldi	r20, 0x02	; 2
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	62 e1       	ldi	r22, 0x12	; 18
 540:	71 e0       	ldi	r23, 0x01	; 1
 542:	09 95       	icall
 544:	08 95       	ret

00000546 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	ec 01       	movw	r28, r24
  size_t n = print(c);
 550:	0e 94 81 02 	call	0x502	; 0x502 <_ZN5Print5printEPKc>
 554:	8c 01       	movw	r16, r24
  n += println();
 556:	ce 01       	movw	r24, r28
 558:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN5Print7printlnEv>
  return n;
}
 55c:	80 0f       	add	r24, r16
 55e:	91 1f       	adc	r25, r17
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 590:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <_ZN14SoftwareSerial13active_objectE>
 594:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <_ZN14SoftwareSerial13active_objectE+0x1>
 598:	10 97       	sbiw	r26, 0x00	; 0
 59a:	09 f4       	brne	.+2      	; 0x59e <__vector_3+0x34>
 59c:	81 c0       	rjmp	.+258    	; 0x6a0 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 59e:	5e 96       	adiw	r26, 0x1e	; 30
 5a0:	8c 91       	ld	r24, X
 5a2:	5e 97       	sbiw	r26, 0x1e	; 30
 5a4:	81 ff       	sbrs	r24, 1
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 5a8:	1e 96       	adiw	r26, 0x0e	; 14
 5aa:	ed 91       	ld	r30, X+
 5ac:	fc 91       	ld	r31, X
 5ae:	1f 97       	sbiw	r26, 0x0f	; 15
 5b0:	90 81       	ld	r25, Z

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 5b2:	1d 96       	adiw	r26, 0x0d	; 13
 5b4:	8c 91       	ld	r24, X
 5b6:	1d 97       	sbiw	r26, 0x0d	; 13
 5b8:	98 23       	and	r25, r24
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	71 f4       	brne	.+28     	; 0x5da <__vector_3+0x70>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	0c c0       	rjmp	.+24     	; 0x5da <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 5c2:	1e 96       	adiw	r26, 0x0e	; 14
 5c4:	ed 91       	ld	r30, X+
 5c6:	fc 91       	ld	r31, X
 5c8:	1f 97       	sbiw	r26, 0x0f	; 15
 5ca:	90 81       	ld	r25, Z

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 5cc:	1d 96       	adiw	r26, 0x0d	; 13
 5ce:	8c 91       	ld	r24, X
 5d0:	1d 97       	sbiw	r26, 0x0d	; 13
 5d2:	98 23       	and	r25, r24
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	09 f0       	breq	.+2      	; 0x5da <__vector_3+0x70>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <__vector_3+0x76>
 5de:	60 c0       	rjmp	.+192    	; 0x6a0 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 5e0:	53 96       	adiw	r26, 0x13	; 19
 5e2:	ed 91       	ld	r30, X+
 5e4:	fc 91       	ld	r31, X
 5e6:	54 97       	sbiw	r26, 0x14	; 20
 5e8:	90 81       	ld	r25, Z
 5ea:	55 96       	adiw	r26, 0x15	; 21
 5ec:	8c 91       	ld	r24, X
 5ee:	55 97       	sbiw	r26, 0x15	; 21
 5f0:	80 95       	com	r24
 5f2:	89 23       	and	r24, r25
 5f4:	80 83       	st	Z, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 5f6:	56 96       	adiw	r26, 0x16	; 22
 5f8:	8d 91       	ld	r24, X+
 5fa:	9c 91       	ld	r25, X
 5fc:	57 97       	sbiw	r26, 0x17	; 23
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 602:	58 96       	adiw	r26, 0x18	; 24
 604:	6d 91       	ld	r22, X+
 606:	7c 91       	ld	r23, X
 608:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 60a:	1e 96       	adiw	r26, 0x0e	; 14
 60c:	cd 91       	ld	r28, X+
 60e:	dc 91       	ld	r29, X
 610:	1f 97       	sbiw	r26, 0x0f	; 15
 612:	1d 96       	adiw	r26, 0x0d	; 13
 614:	5c 91       	ld	r21, X
 616:	1d 97       	sbiw	r26, 0x0d	; 13
 618:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	fb 01       	movw	r30, r22
 61e:	31 97       	sbiw	r30, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 622:	84 2f       	mov	r24, r20
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	95 95       	asr	r25
 628:	87 95       	ror	r24
 62a:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 62c:	28 81       	ld	r18, Y
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 62e:	25 23       	and	r18, r21
 630:	09 f0       	breq	.+2      	; 0x634 <__vector_3+0xca>
        d |= 0x80;
 632:	40 68       	ori	r20, 0x80	; 128
 634:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 636:	91 f7       	brne	.-28     	; 0x61c <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 638:	5e 96       	adiw	r26, 0x1e	; 30
 63a:	8c 91       	ld	r24, X
 63c:	5e 97       	sbiw	r26, 0x1e	; 30
 63e:	81 fd       	sbrc	r24, 1
      d = ~d;
 640:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 642:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZN14SoftwareSerial20_receive_buffer_tailE>
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	8f 73       	andi	r24, 0x3F	; 63
 64c:	90 78       	andi	r25, 0x80	; 128
 64e:	99 23       	and	r25, r25
 650:	24 f4       	brge	.+8      	; 0x65a <__vector_3+0xf0>
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	80 6c       	ori	r24, 0xC0	; 192
 656:	9f 6f       	ori	r25, 0xFF	; 255
 658:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
 65a:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <_ZN14SoftwareSerial20_receive_buffer_headE>
 65e:	28 17       	cp	r18, r24
 660:	49 f0       	breq	.+18     	; 0x674 <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 662:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <_ZN14SoftwareSerial20_receive_buffer_tailE>
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	e5 53       	subi	r30, 0x35	; 53
 66a:	fe 4f       	sbci	r31, 0xFE	; 254
 66c:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
 66e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ZN14SoftwareSerial20_receive_buffer_tailE>
 672:	07 c0       	rjmp	.+14     	; 0x682 <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 674:	5e 96       	adiw	r26, 0x1e	; 30
 676:	8c 91       	ld	r24, X
 678:	5e 97       	sbiw	r26, 0x1e	; 30
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	5e 96       	adiw	r26, 0x1e	; 30
 67e:	8c 93       	st	X, r24
 680:	5e 97       	sbiw	r26, 0x1e	; 30
 682:	5a 96       	adiw	r26, 0x1a	; 26
 684:	8d 91       	ld	r24, X+
 686:	9c 91       	ld	r25, X
 688:	5b 97       	sbiw	r26, 0x1b	; 27
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	f1 f7       	brne	.-4      	; 0x68a <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 68e:	53 96       	adiw	r26, 0x13	; 19
 690:	ed 91       	ld	r30, X+
 692:	fc 91       	ld	r31, X
 694:	54 97       	sbiw	r26, 0x14	; 20
 696:	90 81       	ld	r25, Z
 698:	55 96       	adiw	r26, 0x15	; 21
 69a:	8c 91       	ld	r24, X
 69c:	89 2b       	or	r24, r25
 69e:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <_Z9twi_startv>:

#include "TWI.h"

void twi_start(){
	TWBR=16;
 6c6:	80 e1       	ldi	r24, 0x10	; 16
 6c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWCR= (1<<TWINT) | (1<<TWEN) | 1<<(TWSTA) ; //clear interrupt flag, enable twi, start
 6cc:	84 ea       	ldi	r24, 0xA4	; 164
 6ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};				//wait for interrupt flag in TWCR register
 6d2:	ec eb       	ldi	r30, 0xBC	; 188
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	88 23       	and	r24, r24
 6da:	ec f7       	brge	.-6      	; 0x6d6 <_Z9twi_startv+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6dc:	8f e3       	ldi	r24, 0x3F	; 63
 6de:	9c e9       	ldi	r25, 0x9C	; 156
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <_Z9twi_startv+0x1a>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <_Z9twi_startv+0x20>
 6e6:	00 00       	nop
 6e8:	08 95       	ret

000006ea <_Z14twi_write_byteh>:
	_delay_ms(10);
}

void twi_write_byte(uint8_t data){
	TWDR = data;								//TWDR store data to send or received
 6ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ee:	8f e8       	ldi	r24, 0x8F	; 143
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <_Z14twi_write_byteh+0x8>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <_Z14twi_write_byteh+0xe>
 6f8:	00 00       	nop
	_delay_us(100);
	TWCR= (1<<TWINT) | (1<<TWEN);				//clear interrupt flag, enable twi
 6fa:	84 e8       	ldi	r24, 0x84	; 132
 6fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};				//wait for interrupt flag in TWCR register
 700:	ec eb       	ldi	r30, 0xBC	; 188
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	88 23       	and	r24, r24
 708:	ec f7       	brge	.-6      	; 0x704 <_Z14twi_write_byteh+0x1a>
}
 70a:	08 95       	ret

0000070c <_Z13twi_read_byteh>:


uint8_t twi_read_byte(uint8_t use_ACK){
	TWCR= (1<<TWINT) | (1<<TWEN) | (use_ACK<<TWEA);		//clear interrupt flag, enable twi, (generate ACK bit)
 70c:	20 e4       	ldi	r18, 0x40	; 64
 70e:	82 9f       	mul	r24, r18
 710:	c0 01       	movw	r24, r0
 712:	11 24       	eor	r1, r1
 714:	84 68       	ori	r24, 0x84	; 132
 716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};
 71a:	ec eb       	ldi	r30, 0xBC	; 188
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	88 23       	and	r24, r24
 722:	ec f7       	brge	.-6      	; 0x71e <_Z13twi_read_byteh+0x12>
	return TWDR;								//TWDR store data to send or received
 724:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 728:	08 95       	ret

0000072a <_Z8twi_stopv>:


void twi_stop(){
	TWCR= (1<<TWINT) | (1<<TWEN) | (1<<TWSTO) ;//clear interrupt flag, enable twi, stop
 72a:	84 e9       	ldi	r24, 0x94	; 148
 72c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWSTO))){};
 730:	ec eb       	ldi	r30, 0xBC	; 188
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	84 ff       	sbrs	r24, 4
 738:	fd cf       	rjmp	.-6      	; 0x734 <_Z8twi_stopv+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73a:	2f ef       	ldi	r18, 0xFF	; 255
 73c:	89 ef       	ldi	r24, 0xF9	; 249
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	21 50       	subi	r18, 0x01	; 1
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	90 40       	sbci	r25, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <_Z8twi_stopv+0x16>
 748:	00 c0       	rjmp	.+0      	; 0x74a <_Z8twi_stopv+0x20>
 74a:	00 00       	nop
 74c:	08 95       	ret

0000074e <main>:
PCF8574 expander_gpio(0x3b);
PCF8574 key_pad(0x3c);
int main(void)
{
	//Serial.begin(115200);
	Serial.println("Hello bro");
 74e:	61 e2       	ldi	r22, 0x21	; 33
 750:	71 e0       	ldi	r23, 0x01	; 1
 752:	8c e2       	ldi	r24, 0x2C	; 44
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN5Print7printlnEPKc>
 75a:	2f e9       	ldi	r18, 0x9F	; 159
 75c:	86 e8       	ldi	r24, 0x86	; 134
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <main+0x12>
 768:	00 c0       	rjmp	.+0      	; 0x76a <main+0x1c>
 76a:	00 00       	nop
	_delay_ms(500);
	expander_gpio.pinMode(1, INPUT);
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	81 e1       	ldi	r24, 0x11	; 17
 772:	92 e0       	ldi	r25, 0x02	; 2
 774:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_ZN7PCF85747pinModeEhh>
	expander_gpio.digitalWrite(1,HIGH);
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	81 e1       	ldi	r24, 0x11	; 17
 77e:	92 e0       	ldi	r25, 0x02	; 2
 780:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN7PCF857412digitalWriteEhh>
	/* Setup interrupts */
	DDRD &= ~(1 << PIND2);
 784:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PIND2);
 786:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1 << ISC10);
 788:	e9 e6       	ldi	r30, 0x69	; 105
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 792:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 794:	78 94       	sei
 796:	ff cf       	rjmp	.-2      	; 0x796 <main+0x48>

00000798 <__vector_1>:
    while (1) 
    {
    }
}
ISR(INT0_vect)
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	2f 93       	push	r18
 7a4:	3f 93       	push	r19
 7a6:	4f 93       	push	r20
 7a8:	5f 93       	push	r21
 7aa:	6f 93       	push	r22
 7ac:	7f 93       	push	r23
 7ae:	8f 93       	push	r24
 7b0:	9f 93       	push	r25
 7b2:	af 93       	push	r26
 7b4:	bf 93       	push	r27
 7b6:	ef 93       	push	r30
 7b8:	ff 93       	push	r31
	cli();
 7ba:	f8 94       	cli
 7bc:	8f e4       	ldi	r24, 0x4F	; 79
 7be:	93 ec       	ldi	r25, 0xC3	; 195
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <__vector_1+0x28>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__vector_1+0x2e>
 7c6:	00 00       	nop
	_delay_ms(200);
	DDRB = 0xff;
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	84 b9       	out	0x04, r24	; 4
	PORTB ^= 0xff;
 7cc:	85 b1       	in	r24, 0x05	; 5
 7ce:	80 95       	com	r24
 7d0:	85 b9       	out	0x05, r24	; 5
	expander_gpio.digitalWrite(1,LOW);
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	81 e1       	ldi	r24, 0x11	; 17
 7d8:	92 e0       	ldi	r25, 0x02	; 2
 7da:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN7PCF857412digitalWriteEhh>
	sei();
 7de:	78 94       	sei
}
 7e0:	ff 91       	pop	r31
 7e2:	ef 91       	pop	r30
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	7f 91       	pop	r23
 7ee:	6f 91       	pop	r22
 7f0:	5f 91       	pop	r21
 7f2:	4f 91       	pop	r20
 7f4:	3f 91       	pop	r19
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <_GLOBAL__sub_I_expander_gpio>:
#include "pcf8574.h"
#include "avr/interrupt.h"
#include "avr/delay.h"


PCF8574 expander_gpio(0x3b);
 802:	6b e3       	ldi	r22, 0x3B	; 59
 804:	81 e1       	ldi	r24, 0x11	; 17
 806:	92 e0       	ldi	r25, 0x02	; 2
 808:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN7PCF8574C1Eh>
PCF8574 key_pad(0x3c);
 80c:	6c e3       	ldi	r22, 0x3C	; 60
 80e:	8d e0       	ldi	r24, 0x0D	; 13
 810:	92 e0       	ldi	r25, 0x02	; 2
 812:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN7PCF8574C1Eh>
 816:	08 95       	ret

00000818 <__tablejump2__>:
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	05 90       	lpm	r0, Z+
 81e:	f4 91       	lpm	r31, Z
 820:	e0 2d       	mov	r30, r0
 822:	09 94       	ijmp

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
