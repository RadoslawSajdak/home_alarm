
home_alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc5  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d8  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060b  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054c  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fe  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  78:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN7PCF8574C1Eh>:
#include "pcf8574.h"

PCF8574::PCF8574(uint8_t address) :
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	ec 01       	movw	r28, r24
		_PORT(0), _PIN(0), _DDR(0), _address(0)
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	1a 82       	std	Y+2, r1	; 0x02
  8a:	1b 82       	std	Y+3, r1	; 0x03
{
	_address = address;
  8c:	68 83       	st	Y, r22
	twi_start();
  8e:	0e 94 c3 00 	call	0x186	; 0x186 <_Z9twi_startv>
	_PIN = twi_read_byte((_address << 1) | (1 << 1));
  92:	88 81       	ld	r24, Y
  94:	88 0f       	add	r24, r24
  96:	82 60       	ori	r24, 0x02	; 2
  98:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z13twi_read_byteh>
  9c:	89 83       	std	Y+1, r24	; 0x01
	twi_stop();
  9e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z8twi_stopv>
}
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <_ZN7PCF857410updateGPIOEv>:

	/* Update GPIO values */
	updateGPIO();
}
void PCF8574::updateGPIO()
{
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
	uint8_t value = (_PIN & ~_DDR) | _PORT;
  b0:	1b 81       	ldd	r17, Y+3	; 0x03
  b2:	10 95       	com	r17
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	18 23       	and	r17, r24
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	18 2b       	or	r17, r24
	
	twi_start();
  bc:	0e 94 c3 00 	call	0x186	; 0x186 <_Z9twi_startv>
	twi_write_byte(_address << 1);
  c0:	88 81       	ld	r24, Y
  c2:	88 0f       	add	r24, r24
  c4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z14twi_write_byteh>
	twi_write_byte(value);
  c8:	81 2f       	mov	r24, r17
  ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z14twi_write_byteh>
	twi_stop();
  ce:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z8twi_stopv>
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	1f 91       	pop	r17
  d8:	08 95       	ret

000000da <_ZN7PCF85747pinModeEhh>:
	twi_stop();
}
void PCF8574::pinMode(uint8_t pin, uint8_t mode)
{
	/* Switch according mode */
	switch (mode) {
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	a1 f0       	breq	.+40     	; 0x106 <_ZN7PCF85747pinModeEhh+0x2c>
  de:	18 f0       	brcs	.+6      	; 0xe6 <_ZN7PCF85747pinModeEhh+0xc>
  e0:	42 30       	cpi	r20, 0x02	; 2
  e2:	11 f1       	breq	.+68     	; 0x128 <_ZN7PCF85747pinModeEhh+0x4e>
  e4:	30 c0       	rjmp	.+96     	; 0x146 <_ZN7PCF85747pinModeEhh+0x6c>
		case INPUT:
		_DDR &= ~(1 << pin);
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <_ZN7PCF85747pinModeEhh+0x16>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <_ZN7PCF85747pinModeEhh+0x12>
  f4:	20 95       	com	r18
  f6:	fc 01       	movw	r30, r24
  f8:	33 81       	ldd	r19, Z+3	; 0x03
  fa:	32 23       	and	r19, r18
  fc:	33 83       	std	Z+3, r19	; 0x03
		_PORT &= ~(1 << pin);
  fe:	32 81       	ldd	r19, Z+2	; 0x02
 100:	23 23       	and	r18, r19
 102:	22 83       	std	Z+2, r18	; 0x02
		break;
 104:	20 c0       	rjmp	.+64     	; 0x146 <_ZN7PCF85747pinModeEhh+0x6c>

		case INPUT_PULLUP:
		_DDR &= ~(1 << pin);
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <_ZN7PCF85747pinModeEhh+0x36>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <_ZN7PCF85747pinModeEhh+0x32>
 114:	32 2f       	mov	r19, r18
 116:	30 95       	com	r19
 118:	fc 01       	movw	r30, r24
 11a:	43 81       	ldd	r20, Z+3	; 0x03
 11c:	34 23       	and	r19, r20
 11e:	33 83       	std	Z+3, r19	; 0x03
		_PORT |= (1 << pin);
 120:	32 81       	ldd	r19, Z+2	; 0x02
 122:	23 2b       	or	r18, r19
 124:	22 83       	std	Z+2, r18	; 0x02
		break;
 126:	0f c0       	rjmp	.+30     	; 0x146 <_ZN7PCF85747pinModeEhh+0x6c>

		case OUTPUT:
		_DDR |= (1 << pin);
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <_ZN7PCF85747pinModeEhh+0x58>
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <_ZN7PCF85747pinModeEhh+0x54>
 136:	fc 01       	movw	r30, r24
 138:	33 81       	ldd	r19, Z+3	; 0x03
 13a:	32 2b       	or	r19, r18
 13c:	33 83       	std	Z+3, r19	; 0x03
		_PORT &= ~(1 << pin);
 13e:	20 95       	com	r18
 140:	32 81       	ldd	r19, Z+2	; 0x02
 142:	23 23       	and	r18, r19
 144:	22 83       	std	Z+2, r18	; 0x02
		default:
		break;
	}

	/* Update GPIO values */
	updateGPIO();
 146:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN7PCF857410updateGPIOEv>
 14a:	08 95       	ret

0000014c <_ZN7PCF857412digitalWriteEhh>:
}
void PCF8574::digitalWrite(uint8_t pin, uint8_t value) {

	/* Set PORT bit value */
	if (value)
 14c:	44 23       	and	r20, r20
 14e:	61 f0       	breq	.+24     	; 0x168 <_ZN7PCF857412digitalWriteEhh+0x1c>
	_PORT |= (1 << pin);
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <_ZN7PCF857412digitalWriteEhh+0xe>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <_ZN7PCF857412digitalWriteEhh+0xa>
 15e:	fc 01       	movw	r30, r24
 160:	32 81       	ldd	r19, Z+2	; 0x02
 162:	23 2b       	or	r18, r19
 164:	22 83       	std	Z+2, r18	; 0x02
 166:	0c c0       	rjmp	.+24     	; 0x180 <_ZN7PCF857412digitalWriteEhh+0x34>
	else
	_PORT &= ~(1 << pin);
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_ZN7PCF857412digitalWriteEhh+0x26>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <_ZN7PCF857412digitalWriteEhh+0x22>
 176:	20 95       	com	r18
 178:	fc 01       	movw	r30, r24
 17a:	32 81       	ldd	r19, Z+2	; 0x02
 17c:	23 23       	and	r18, r19
 17e:	22 83       	std	Z+2, r18	; 0x02

	/* Update GPIO values */
	updateGPIO();
 180:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN7PCF857410updateGPIOEv>
 184:	08 95       	ret

00000186 <_Z9twi_startv>:

#include "TWI.h"

void twi_start(){
	TWBR=16;
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWCR= (1<<TWINT) | (1<<TWEN) | 1<<(TWSTA) ; //clear interrupt flag, enable twi, start
 18c:	84 ea       	ldi	r24, 0xA4	; 164
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};				//wait for interrupt flag in TWCR register
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <_Z9twi_startv+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9c e9       	ldi	r25, 0x9C	; 156
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <_Z9twi_startv+0x1a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_Z9twi_startv+0x20>
 1a6:	00 00       	nop
 1a8:	08 95       	ret

000001aa <_Z14twi_write_byteh>:
	_delay_ms(10);
}

void twi_write_byte(uint8_t data){
	TWDR = data;								//TWDR store data to send or received
 1aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	8f e8       	ldi	r24, 0x8F	; 143
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <_Z14twi_write_byteh+0x8>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z14twi_write_byteh+0xe>
 1b8:	00 00       	nop
	_delay_us(100);
	TWCR= (1<<TWINT) | (1<<TWEN);				//clear interrupt flag, enable twi
 1ba:	84 e8       	ldi	r24, 0x84	; 132
 1bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};				//wait for interrupt flag in TWCR register
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	ec f7       	brge	.-6      	; 0x1c4 <_Z14twi_write_byteh+0x1a>
}
 1ca:	08 95       	ret

000001cc <_Z13twi_read_byteh>:


uint8_t twi_read_byte(uint8_t use_ACK){
	TWCR= (1<<TWINT) | (1<<TWEN) | (use_ACK<<TWEA);		//clear interrupt flag, enable twi, (generate ACK bit)
 1cc:	20 e4       	ldi	r18, 0x40	; 64
 1ce:	82 9f       	mul	r24, r18
 1d0:	c0 01       	movw	r24, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	84 68       	ori	r24, 0x84	; 132
 1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	ec f7       	brge	.-6      	; 0x1de <_Z13twi_read_byteh+0x12>
	return TWDR;								//TWDR store data to send or received
 1e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 1e8:	08 95       	ret

000001ea <_Z8twi_stopv>:


void twi_stop(){
	TWCR= (1<<TWINT) | (1<<TWEN) | (1<<TWSTO) ;//clear interrupt flag, enable twi, stop
 1ea:	84 e9       	ldi	r24, 0x94	; 148
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWSTO))){};
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	84 ff       	sbrs	r24, 4
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <_Z8twi_stopv+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	89 ef       	ldi	r24, 0xF9	; 249
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <_Z8twi_stopv+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <_Z8twi_stopv+0x20>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <main>:
#include "pcf8574.h"
#include "avr/interrupt.h"
#include "avr/delay.h"

int main(void)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	00 d0       	rcall	.+0      	; 0x214 <main+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <main+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	PCF8574 expander_gpio(0x3b);
 21a:	6b e3       	ldi	r22, 0x3B	; 59
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	0e 94 40 00 	call	0x80	; 0x80 <_ZN7PCF8574C1Eh>
	expander_gpio.pinMode(1, INPUT);
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	0e 94 6d 00 	call	0xda	; 0xda <_ZN7PCF85747pinModeEhh>
	expander_gpio.digitalWrite(1,HIGH);
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	ce 01       	movw	r24, r28
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN7PCF857412digitalWriteEhh>
	
	/* Setup interrupts */
	DDRD &= ~(1 << PIND2);
 23c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PIND2);
 23e:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1 << ISC10);
 240:	e9 e6       	ldi	r30, 0x69	; 105
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	84 60       	ori	r24, 0x04	; 4
 248:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 24a:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 24c:	78 94       	sei
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0x40>

00000250 <__vector_1>:
    while (1) 
    {
    }
}
ISR(INT0_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
	cli();
 260:	f8 94       	cli
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	83 ec       	ldi	r24, 0xC3	; 195
 266:	99 e0       	ldi	r25, 0x09	; 9
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <__vector_1+0x18>
 270:	00 c0       	rjmp	.+0      	; 0x272 <__vector_1+0x22>
 272:	00 00       	nop
	_delay_ms(200);
	DDRB = 0xff;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	84 b9       	out	0x04, r24	; 4
	PORTB ^= 0xff;
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	80 95       	com	r24
 27c:	85 b9       	out	0x05, r24	; 5
	sei();
 27e:	78 94       	sei
}
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
