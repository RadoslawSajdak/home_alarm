
home_alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e54  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000621  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000454  00000000  00000000  000029e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_1>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	69 01       	movw	r12, r18

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 6f 01 	call	0x2de	; 0x2de <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  a0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN7PCF8574C1Eh>:
#include "pcf8574.h"

PCF8574::PCF8574(uint8_t address) :
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
		_PORT(0), _PIN(0), _DDR(0), _address(0)
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	1a 82       	std	Y+2, r1	; 0x02
  b2:	1b 82       	std	Y+3, r1	; 0x03
{
	_address = address;
  b4:	68 83       	st	Y, r22
	twi_start();
  b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z9twi_startv>
	_PIN = twi_read_byte((_address << 1) | (1 << 1));
  ba:	88 81       	ld	r24, Y
  bc:	88 0f       	add	r24, r24
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z13twi_read_byteh>
  c4:	89 83       	std	Y+1, r24	; 0x01
	twi_stop();
  c6:	0e 94 09 01 	call	0x212	; 0x212 <_Z8twi_stopv>
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <_ZN7PCF857410updateGPIOEv>:

	/* Update GPIO values */
	updateGPIO();
}
void PCF8574::updateGPIO()
{
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
	uint8_t value = (_PIN & ~_DDR) | _PORT;
  d8:	1b 81       	ldd	r17, Y+3	; 0x03
  da:	10 95       	com	r17
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	18 23       	and	r17, r24
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	18 2b       	or	r17, r24
	
	twi_start();
  e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z9twi_startv>
	twi_write_byte(_address << 1);
  e8:	88 81       	ld	r24, Y
  ea:	88 0f       	add	r24, r24
  ec:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z14twi_write_byteh>
	twi_write_byte(value);
  f0:	81 2f       	mov	r24, r17
  f2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z14twi_write_byteh>
	twi_stop();
  f6:	0e 94 09 01 	call	0x212	; 0x212 <_Z8twi_stopv>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	08 95       	ret

00000102 <_ZN7PCF85747pinModeEhh>:
	twi_stop();
}
void PCF8574::pinMode(uint8_t pin, uint8_t mode)
{
	/* Switch according mode */
	switch (mode) {
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	a1 f0       	breq	.+40     	; 0x12e <_ZN7PCF85747pinModeEhh+0x2c>
 106:	18 f0       	brcs	.+6      	; 0x10e <_ZN7PCF85747pinModeEhh+0xc>
 108:	42 30       	cpi	r20, 0x02	; 2
 10a:	11 f1       	breq	.+68     	; 0x150 <_ZN7PCF85747pinModeEhh+0x4e>
 10c:	30 c0       	rjmp	.+96     	; 0x16e <_ZN7PCF85747pinModeEhh+0x6c>
		case INPUT:
		_DDR &= ~(1 << pin);
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <_ZN7PCF85747pinModeEhh+0x16>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <_ZN7PCF85747pinModeEhh+0x12>
 11c:	20 95       	com	r18
 11e:	fc 01       	movw	r30, r24
 120:	33 81       	ldd	r19, Z+3	; 0x03
 122:	32 23       	and	r19, r18
 124:	33 83       	std	Z+3, r19	; 0x03
		_PORT &= ~(1 << pin);
 126:	32 81       	ldd	r19, Z+2	; 0x02
 128:	23 23       	and	r18, r19
 12a:	22 83       	std	Z+2, r18	; 0x02
		break;
 12c:	20 c0       	rjmp	.+64     	; 0x16e <_ZN7PCF85747pinModeEhh+0x6c>

		case INPUT_PULLUP:
		_DDR &= ~(1 << pin);
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <_ZN7PCF85747pinModeEhh+0x36>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <_ZN7PCF85747pinModeEhh+0x32>
 13c:	32 2f       	mov	r19, r18
 13e:	30 95       	com	r19
 140:	fc 01       	movw	r30, r24
 142:	43 81       	ldd	r20, Z+3	; 0x03
 144:	34 23       	and	r19, r20
 146:	33 83       	std	Z+3, r19	; 0x03
		_PORT |= (1 << pin);
 148:	32 81       	ldd	r19, Z+2	; 0x02
 14a:	23 2b       	or	r18, r19
 14c:	22 83       	std	Z+2, r18	; 0x02
		break;
 14e:	0f c0       	rjmp	.+30     	; 0x16e <_ZN7PCF85747pinModeEhh+0x6c>

		case OUTPUT:
		_DDR |= (1 << pin);
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <_ZN7PCF85747pinModeEhh+0x58>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <_ZN7PCF85747pinModeEhh+0x54>
 15e:	fc 01       	movw	r30, r24
 160:	33 81       	ldd	r19, Z+3	; 0x03
 162:	32 2b       	or	r19, r18
 164:	33 83       	std	Z+3, r19	; 0x03
		_PORT &= ~(1 << pin);
 166:	20 95       	com	r18
 168:	32 81       	ldd	r19, Z+2	; 0x02
 16a:	23 23       	and	r18, r19
 16c:	22 83       	std	Z+2, r18	; 0x02
		default:
		break;
	}

	/* Update GPIO values */
	updateGPIO();
 16e:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN7PCF857410updateGPIOEv>
 172:	08 95       	ret

00000174 <_ZN7PCF857412digitalWriteEhh>:
}
void PCF8574::digitalWrite(uint8_t pin, uint8_t value) {

	/* Set PORT bit value */
	if (value)
 174:	44 23       	and	r20, r20
 176:	61 f0       	breq	.+24     	; 0x190 <_ZN7PCF857412digitalWriteEhh+0x1c>
	_PORT |= (1 << pin);
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <_ZN7PCF857412digitalWriteEhh+0xe>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <_ZN7PCF857412digitalWriteEhh+0xa>
 186:	fc 01       	movw	r30, r24
 188:	32 81       	ldd	r19, Z+2	; 0x02
 18a:	23 2b       	or	r18, r19
 18c:	22 83       	std	Z+2, r18	; 0x02
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <_ZN7PCF857412digitalWriteEhh+0x34>
	else
	_PORT &= ~(1 << pin);
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <_ZN7PCF857412digitalWriteEhh+0x26>
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <_ZN7PCF857412digitalWriteEhh+0x22>
 19e:	20 95       	com	r18
 1a0:	fc 01       	movw	r30, r24
 1a2:	32 81       	ldd	r19, Z+2	; 0x02
 1a4:	23 23       	and	r18, r19
 1a6:	22 83       	std	Z+2, r18	; 0x02

	/* Update GPIO values */
	updateGPIO();
 1a8:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN7PCF857410updateGPIOEv>
 1ac:	08 95       	ret

000001ae <_Z9twi_startv>:

#include "TWI.h"

void twi_start(){
	TWBR=16;
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWCR= (1<<TWINT) | (1<<TWEN) | 1<<(TWSTA) ; //clear interrupt flag, enable twi, start
 1b4:	84 ea       	ldi	r24, 0xA4	; 164
 1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};				//wait for interrupt flag in TWCR register
 1ba:	ec eb       	ldi	r30, 0xBC	; 188
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	ec f7       	brge	.-6      	; 0x1be <_Z9twi_startv+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	8f e3       	ldi	r24, 0x3F	; 63
 1c6:	9c e9       	ldi	r25, 0x9C	; 156
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z9twi_startv+0x1a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z9twi_startv+0x20>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <_Z14twi_write_byteh>:
	_delay_ms(10);
}

void twi_write_byte(uint8_t data){
	TWDR = data;								//TWDR store data to send or received
 1d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e8       	ldi	r24, 0x8F	; 143
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <_Z14twi_write_byteh+0x8>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z14twi_write_byteh+0xe>
 1e0:	00 00       	nop
	_delay_us(100);
	TWCR= (1<<TWINT) | (1<<TWEN);				//clear interrupt flag, enable twi
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};				//wait for interrupt flag in TWCR register
 1e8:	ec eb       	ldi	r30, 0xBC	; 188
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	ec f7       	brge	.-6      	; 0x1ec <_Z14twi_write_byteh+0x1a>
}
 1f2:	08 95       	ret

000001f4 <_Z13twi_read_byteh>:


uint8_t twi_read_byte(uint8_t use_ACK){
	TWCR= (1<<TWINT) | (1<<TWEN) | (use_ACK<<TWEA);		//clear interrupt flag, enable twi, (generate ACK bit)
 1f4:	20 e4       	ldi	r18, 0x40	; 64
 1f6:	82 9f       	mul	r24, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	84 68       	ori	r24, 0x84	; 132
 1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWINT))){};
 202:	ec eb       	ldi	r30, 0xBC	; 188
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	ec f7       	brge	.-6      	; 0x206 <_Z13twi_read_byteh+0x12>
	return TWDR;								//TWDR store data to send or received
 20c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 210:	08 95       	ret

00000212 <_Z8twi_stopv>:


void twi_stop(){
	TWCR= (1<<TWINT) | (1<<TWEN) | (1<<TWSTO) ;//clear interrupt flag, enable twi, stop
 212:	84 e9       	ldi	r24, 0x94	; 148
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR&(1<<TWSTO))){};
 218:	ec eb       	ldi	r30, 0xBC	; 188
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	84 ff       	sbrs	r24, 4
 220:	fd cf       	rjmp	.-6      	; 0x21c <_Z8twi_stopv+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	89 ef       	ldi	r24, 0xF9	; 249
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <_Z8twi_stopv+0x16>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_Z8twi_stopv+0x20>
 232:	00 00       	nop
 234:	08 95       	ret

00000236 <main>:
PCF8574 expander_gpio(0x3b);

int main(void)
{
	
	expander_gpio.pinMode(1, INPUT);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 81 00 	call	0x102	; 0x102 <_ZN7PCF85747pinModeEhh>
	expander_gpio.digitalWrite(1,HIGH);
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN7PCF857412digitalWriteEhh>
	
	/* Setup interrupts */
	DDRD &= ~(1 << PIND2);
 24e:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PIND2);
 250:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1 << ISC10);
 252:	e9 e6       	ldi	r30, 0x69	; 105
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 25c:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 25e:	78 94       	sei
 260:	ff cf       	rjmp	.-2      	; 0x260 <main+0x2a>

00000262 <__vector_1>:
    while (1) 
    {
    }
}
ISR(INT0_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	cli();
 284:	f8 94       	cli
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	83 ec       	ldi	r24, 0xC3	; 195
 28a:	99 e0       	ldi	r25, 0x09	; 9
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <__vector_1+0x2a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <__vector_1+0x34>
 296:	00 00       	nop
	_delay_ms(200);
	DDRB = 0xff;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	84 b9       	out	0x04, r24	; 4
	PORTB ^= 0xff;
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	80 95       	com	r24
 2a0:	85 b9       	out	0x05, r24	; 5
	expander_gpio.digitalWrite(1,LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN7PCF857412digitalWriteEhh>
	sei();
 2ae:	78 94       	sei
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <_GLOBAL__sub_I_expander_gpio>:
#include <avr/io.h>
#include "pcf8574.h"
#include "avr/interrupt.h"
#include "avr/delay.h"

PCF8574 expander_gpio(0x3b);
 2d2:	6b e3       	ldi	r22, 0x3B	; 59
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN7PCF8574C1Eh>
 2dc:	08 95       	ret

000002de <__tablejump2__>:
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	05 90       	lpm	r0, Z+
 2e4:	f4 91       	lpm	r31, Z
 2e6:	e0 2d       	mov	r30, r0
 2e8:	09 94       	ijmp

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
