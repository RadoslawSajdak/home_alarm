
home_alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000636  000006ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e1  0080012c  0080012c  000006f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008951  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ab  00000000  00000000  00009331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018e2  00000000  00000000  0000abdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b4  00000000  00000000  0000c4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000209c  00000000  00000000  0000cc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003037  00000000  00000000  0000ed10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00011d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_3>
  10:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_3>
  14:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_3>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_18>
  4c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	a1 01       	movw	r20, r2

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e6 e3       	ldi	r30, 0x36	; 54
  7e:	f6 e0       	ldi	r31, 0x06	; 6
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 32       	cpi	r26, 0x2C	; 44
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	ac e2       	ldi	r26, 0x2C	; 44
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ad 30       	cpi	r26, 0x0D	; 13
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 13 03 	call	0x626	; 0x626 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 df 02 	call	0x5be	; 0x5be <main>
  b6:	0c 94 19 03 	jmp	0x632	; 0x632 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
  be:	fc 01       	movw	r30, r24
  c0:	91 8d       	ldd	r25, Z+25	; 0x19
  c2:	22 8d       	ldd	r18, Z+26	; 0x1a
  c4:	89 2f       	mov	r24, r25
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 5c       	subi	r24, 0xC0	; 192
  ca:	9f 4f       	sbci	r25, 0xFF	; 255
  cc:	82 1b       	sub	r24, r18
  ce:	91 09       	sbc	r25, r1
  d0:	8f 73       	andi	r24, 0x3F	; 63
  d2:	99 27       	eor	r25, r25
  d4:	08 95       	ret

000000d6 <_ZN14HardwareSerial4peekEv>:
  d6:	fc 01       	movw	r30, r24
  d8:	91 8d       	ldd	r25, Z+25	; 0x19
  da:	82 8d       	ldd	r24, Z+26	; 0x1a
  dc:	98 17       	cp	r25, r24
  de:	31 f0       	breq	.+12     	; 0xec <_ZN14HardwareSerial4peekEv+0x16>
  e0:	82 8d       	ldd	r24, Z+26	; 0x1a
  e2:	e8 0f       	add	r30, r24
  e4:	f1 1d       	adc	r31, r1
  e6:	85 8d       	ldd	r24, Z+29	; 0x1d
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	08 95       	ret

000000f2 <_ZN14HardwareSerial4readEv>:
  f2:	fc 01       	movw	r30, r24
  f4:	91 8d       	ldd	r25, Z+25	; 0x19
  f6:	82 8d       	ldd	r24, Z+26	; 0x1a
  f8:	98 17       	cp	r25, r24
  fa:	61 f0       	breq	.+24     	; 0x114 <_ZN14HardwareSerial4readEv+0x22>
  fc:	82 8d       	ldd	r24, Z+26	; 0x1a
  fe:	df 01       	movw	r26, r30
 100:	a8 0f       	add	r26, r24
 102:	b1 1d       	adc	r27, r1
 104:	5d 96       	adiw	r26, 0x1d	; 29
 106:	8c 91       	ld	r24, X
 108:	92 8d       	ldd	r25, Z+26	; 0x1a
 10a:	9f 5f       	subi	r25, 0xFF	; 255
 10c:	9f 73       	andi	r25, 0x3F	; 63
 10e:	92 8f       	std	Z+26, r25	; 0x1a
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	08 95       	ret

0000011a <_ZN14HardwareSerial17availableForWriteEv>:
 11a:	fc 01       	movw	r30, r24
 11c:	23 8d       	ldd	r18, Z+27	; 0x1b
 11e:	34 8d       	ldd	r19, Z+28	; 0x1c
 120:	23 17       	cp	r18, r19
 122:	38 f0       	brcs	.+14     	; 0x132 <_ZN14HardwareSerial17availableForWriteEv+0x18>
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	82 1b       	sub	r24, r18
 12a:	91 09       	sbc	r25, r1
 12c:	83 0f       	add	r24, r19
 12e:	91 1d       	adc	r25, r1
 130:	08 95       	ret
 132:	83 2f       	mov	r24, r19
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	82 1b       	sub	r24, r18
 138:	91 09       	sbc	r25, r1
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 13e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 140:	84 8d       	ldd	r24, Z+28	; 0x1c
 142:	df 01       	movw	r26, r30
 144:	a8 0f       	add	r26, r24
 146:	b1 1d       	adc	r27, r1
 148:	a3 5a       	subi	r26, 0xA3	; 163
 14a:	bf 4f       	sbci	r27, 0xFF	; 255
 14c:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 14e:	24 8d       	ldd	r18, Z+28	; 0x1c
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	2f 73       	andi	r18, 0x3F	; 63
 158:	30 78       	andi	r19, 0x80	; 128
 15a:	33 23       	and	r19, r19
 15c:	34 f4       	brge	.+12     	; 0x16a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	31 09       	sbc	r19, r1
 162:	20 6c       	ori	r18, 0xC0	; 192
 164:	3f 6f       	ori	r19, 0xFF	; 255
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 16c:	a6 89       	ldd	r26, Z+22	; 0x16
 16e:	b7 89       	ldd	r27, Z+23	; 0x17
 170:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 172:	a0 89       	ldd	r26, Z+16	; 0x10
 174:	b1 89       	ldd	r27, Z+17	; 0x11
 176:	8c 91       	ld	r24, X
 178:	83 70       	andi	r24, 0x03	; 3
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 17e:	93 8d       	ldd	r25, Z+27	; 0x1b
 180:	84 8d       	ldd	r24, Z+28	; 0x1c
 182:	98 13       	cpse	r25, r24
 184:	06 c0       	rjmp	.+12     	; 0x192 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 186:	02 88       	ldd	r0, Z+18	; 0x12
 188:	f3 89       	ldd	r31, Z+19	; 0x13
 18a:	e0 2d       	mov	r30, r0
 18c:	80 81       	ld	r24, Z
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 19a:	88 8d       	ldd	r24, Y+24	; 0x18
 19c:	88 23       	and	r24, r24
 19e:	d9 f0       	breq	.+54     	; 0x1d6 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 1a0:	ea 89       	ldd	r30, Y+18	; 0x12
 1a2:	fb 89       	ldd	r31, Y+19	; 0x13
 1a4:	80 81       	ld	r24, Z
 1a6:	85 fd       	sbrc	r24, 5
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <_ZN14HardwareSerial5flushEv+0x20>
 1aa:	a8 89       	ldd	r26, Y+16	; 0x10
 1ac:	b9 89       	ldd	r27, Y+17	; 0x11
 1ae:	8c 91       	ld	r24, X
 1b0:	86 fd       	sbrc	r24, 6
 1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	07 fc       	sbrc	r0, 7
 1b8:	f5 cf       	rjmp	.-22     	; 0x1a4 <_ZN14HardwareSerial5flushEv+0x10>
 1ba:	80 81       	ld	r24, Z
 1bc:	85 ff       	sbrs	r24, 5
 1be:	f2 cf       	rjmp	.-28     	; 0x1a4 <_ZN14HardwareSerial5flushEv+0x10>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 1c8:	eb cf       	rjmp	.-42     	; 0x1a0 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 1ca:	a8 89       	ldd	r26, Y+16	; 0x10
 1cc:	b9 89       	ldd	r27, Y+17	; 0x11
 1ce:	8c 91       	ld	r24, X
 1d0:	85 ff       	sbrs	r24, 5
 1d2:	e8 cf       	rjmp	.-48     	; 0x1a4 <_ZN14HardwareSerial5flushEv+0x10>
 1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
  _written = true;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1ee:	98 13       	cpse	r25, r24
 1f0:	26 c0       	rjmp	.+76     	; 0x23e <_ZN14HardwareSerial5writeEh+0x62>
 1f2:	e8 89       	ldd	r30, Y+16	; 0x10
 1f4:	f9 89       	ldd	r31, Y+17	; 0x11
 1f6:	80 81       	ld	r24, Z
 1f8:	85 fd       	sbrc	r24, 5
 1fa:	32 c0       	rjmp	.+100    	; 0x260 <_ZN14HardwareSerial5writeEh+0x84>
 1fc:	20 c0       	rjmp	.+64     	; 0x23e <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 1fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
 200:	18 13       	cpse	r17, r24
 202:	0c c0       	rjmp	.+24     	; 0x21c <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	07 fc       	sbrc	r0, 7
 208:	fa cf       	rjmp	.-12     	; 0x1fe <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 20a:	e8 89       	ldd	r30, Y+16	; 0x10
 20c:	f9 89       	ldd	r31, Y+17	; 0x11
 20e:	80 81       	ld	r24, Z
 210:	85 ff       	sbrs	r24, 5
 212:	f5 cf       	rjmp	.-22     	; 0x1fe <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
 214:	ce 01       	movw	r24, r28
 216:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 21a:	f1 cf       	rjmp	.-30     	; 0x1fe <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 21c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 21e:	fe 01       	movw	r30, r28
 220:	e8 0f       	add	r30, r24
 222:	f1 1d       	adc	r31, r1
 224:	e3 5a       	subi	r30, 0xA3	; 163
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 22a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 22c:	f8 94       	cli
    _tx_buffer_head = i;
 22e:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 230:	ea 89       	ldd	r30, Y+18	; 0x12
 232:	fb 89       	ldd	r31, Y+19	; 0x13
 234:	80 81       	ld	r24, Z
 236:	80 62       	ori	r24, 0x20	; 32
 238:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 23a:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
 23c:	1d c0       	rjmp	.+58     	; 0x278 <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 23e:	2b 8d       	ldd	r18, Y+27	; 0x1b
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	2f 73       	andi	r18, 0x3F	; 63
 248:	30 78       	andi	r19, 0x80	; 128
 24a:	33 23       	and	r19, r19
 24c:	34 f4       	brge	.+12     	; 0x25a <_ZN14HardwareSerial5writeEh+0x7e>
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	31 09       	sbc	r19, r1
 252:	20 6c       	ori	r18, 0xC0	; 192
 254:	3f 6f       	ori	r19, 0xFF	; 255
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	06 2f       	mov	r16, r22
 25c:	12 2f       	mov	r17, r18
 25e:	cf cf       	rjmp	.-98     	; 0x1fe <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 260:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 262:	f8 94       	cli
      *_udr = c;
 264:	ee 89       	ldd	r30, Y+22	; 0x16
 266:	ff 89       	ldd	r31, Y+23	; 0x17
 268:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 26a:	e8 89       	ldd	r30, Y+16	; 0x10
 26c:	f9 89       	ldd	r31, Y+17	; 0x11
 26e:	80 81       	ld	r24, Z
 270:	83 70       	andi	r24, 0x03	; 3
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 276:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end+0x10>
 2a2:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__data_end+0x11>
 2a6:	80 81       	ld	r24, Z
 2a8:	82 fd       	sbrc	r24, 2
 2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <__vector_18+0x4e>
 2ac:	ec e2       	ldi	r30, 0x2C	; 44
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	a6 89       	ldd	r26, Z+22	; 0x16
 2b2:	b7 89       	ldd	r27, Z+23	; 0x17
 2b4:	2c 91       	ld	r18, X
 2b6:	81 8d       	ldd	r24, Z+25	; 0x19
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	8f 73       	andi	r24, 0x3F	; 63
 2bc:	92 8d       	ldd	r25, Z+26	; 0x1a
 2be:	89 17       	cp	r24, r25
 2c0:	71 f0       	breq	.+28     	; 0x2de <__vector_18+0x58>
 2c2:	df 01       	movw	r26, r30
 2c4:	e1 8d       	ldd	r30, Z+25	; 0x19
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e4 5d       	subi	r30, 0xD4	; 212
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	25 8f       	std	Z+29, r18	; 0x1d
 2ce:	59 96       	adiw	r26, 0x19	; 25
 2d0:	8c 93       	st	X, r24
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <__vector_18+0x58>
 2d4:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end+0x16>
 2d8:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x17>
 2dc:	80 81       	ld	r24, Z
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_19>:
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
 318:	8c e2       	ldi	r24, 0x2C	; 44
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 342:	ec e2       	ldi	r30, 0x2C	; 44
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	13 82       	std	Z+3, r1	; 0x03
 348:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 34a:	88 ee       	ldi	r24, 0xE8	; 232
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	a0 e0       	ldi	r26, 0x00	; 0
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	84 83       	std	Z+4, r24	; 0x04
 354:	95 83       	std	Z+5, r25	; 0x05
 356:	a6 83       	std	Z+6, r26	; 0x06
 358:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
 362:	85 ec       	ldi	r24, 0xC5	; 197
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	95 87       	std	Z+13, r25	; 0x0d
 368:	84 87       	std	Z+12, r24	; 0x0c
 36a:	84 ec       	ldi	r24, 0xC4	; 196
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	97 87       	std	Z+15, r25	; 0x0f
 370:	86 87       	std	Z+14, r24	; 0x0e
 372:	80 ec       	ldi	r24, 0xC0	; 192
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	91 8b       	std	Z+17, r25	; 0x11
 378:	80 8b       	std	Z+16, r24	; 0x10
 37a:	81 ec       	ldi	r24, 0xC1	; 193
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	93 8b       	std	Z+19, r25	; 0x13
 380:	82 8b       	std	Z+18, r24	; 0x12
 382:	82 ec       	ldi	r24, 0xC2	; 194
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	95 8b       	std	Z+21, r25	; 0x15
 388:	84 8b       	std	Z+20, r24	; 0x14
 38a:	86 ec       	ldi	r24, 0xC6	; 198
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	97 8b       	std	Z+23, r25	; 0x17
 390:	86 8b       	std	Z+22, r24	; 0x16
 392:	11 8e       	std	Z+25, r1	; 0x19
 394:	12 8e       	std	Z+26, r1	; 0x1a
 396:	13 8e       	std	Z+27, r1	; 0x1b
 398:	14 8e       	std	Z+28, r1	; 0x1c
 39a:	08 95       	ret

0000039c <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	41 15       	cp	r20, r1
 3ae:	51 05       	cpc	r21, r1
 3b0:	c1 f0       	breq	.+48     	; 0x3e2 <_ZN5Print5writeEPKhj+0x46>
 3b2:	6a 01       	movw	r12, r20
 3b4:	8c 01       	movw	r16, r24
 3b6:	e6 2e       	mov	r14, r22
 3b8:	f7 2e       	mov	r15, r23
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
 3be:	d7 01       	movw	r26, r14
 3c0:	6d 91       	ld	r22, X+
 3c2:	7d 01       	movw	r14, r26
 3c4:	d8 01       	movw	r26, r16
 3c6:	ed 91       	ld	r30, X+
 3c8:	fc 91       	ld	r31, X
 3ca:	01 90       	ld	r0, Z+
 3cc:	f0 81       	ld	r31, Z
 3ce:	e0 2d       	mov	r30, r0
 3d0:	c8 01       	movw	r24, r16
 3d2:	09 95       	icall
 3d4:	89 2b       	or	r24, r25
 3d6:	39 f0       	breq	.+14     	; 0x3e6 <_ZN5Print5writeEPKhj+0x4a>
 3d8:	21 96       	adiw	r28, 0x01	; 1
 3da:	cc 16       	cp	r12, r28
 3dc:	dd 06       	cpc	r13, r29
 3de:	79 f7       	brne	.-34     	; 0x3be <_ZN5Print5writeEPKhj+0x22>
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_ZN5Print5writeEPKhj+0x4a>
 3e2:	c0 e0       	ldi	r28, 0x00	; 0
 3e4:	d0 e0       	ldi	r29, 0x00	; 0
 3e6:	ce 01       	movw	r24, r28
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	08 95       	ret

000003fa <_ZN5Print5printEPKc>:
 3fa:	61 15       	cp	r22, r1
 3fc:	71 05       	cpc	r23, r1
 3fe:	81 f0       	breq	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 400:	fb 01       	movw	r30, r22
 402:	01 90       	ld	r0, Z+
 404:	00 20       	and	r0, r0
 406:	e9 f7       	brne	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	af 01       	movw	r20, r30
 40c:	46 1b       	sub	r20, r22
 40e:	57 0b       	sbc	r21, r23
 410:	dc 01       	movw	r26, r24
 412:	ed 91       	ld	r30, X+
 414:	fc 91       	ld	r31, X
 416:	02 80       	ldd	r0, Z+2	; 0x02
 418:	f3 81       	ldd	r31, Z+3	; 0x03
 41a:	e0 2d       	mov	r30, r0
 41c:	09 95       	icall
 41e:	08 95       	ret
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	08 95       	ret

00000426 <_ZN5Print7printlnEv>:
 426:	dc 01       	movw	r26, r24
 428:	ed 91       	ld	r30, X+
 42a:	fc 91       	ld	r31, X
 42c:	02 80       	ldd	r0, Z+2	; 0x02
 42e:	f3 81       	ldd	r31, Z+3	; 0x03
 430:	e0 2d       	mov	r30, r0
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	62 e1       	ldi	r22, 0x12	; 18
 438:	71 e0       	ldi	r23, 0x01	; 1
 43a:	09 95       	icall
 43c:	08 95       	ret

0000043e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
  size_t n = print(c);
 448:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN5Print5printEPKc>
 44c:	8c 01       	movw	r16, r24
  n += println();
 44e:	ce 01       	movw	r24, r28
 450:	0e 94 13 02 	call	0x426	; 0x426 <_ZN5Print7printlnEv>
  return n;
}
 454:	80 0f       	add	r24, r16
 456:	91 1f       	adc	r25, r17
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 488:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <_ZN14SoftwareSerial13active_objectE>
 48c:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <_ZN14SoftwareSerial13active_objectE+0x1>
 490:	10 97       	sbiw	r26, 0x00	; 0
 492:	09 f4       	brne	.+2      	; 0x496 <__vector_3+0x34>
 494:	81 c0       	rjmp	.+258    	; 0x598 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 496:	5e 96       	adiw	r26, 0x1e	; 30
 498:	8c 91       	ld	r24, X
 49a:	5e 97       	sbiw	r26, 0x1e	; 30
 49c:	81 ff       	sbrs	r24, 1
 49e:	0d c0       	rjmp	.+26     	; 0x4ba <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 4a0:	1e 96       	adiw	r26, 0x0e	; 14
 4a2:	ed 91       	ld	r30, X+
 4a4:	fc 91       	ld	r31, X
 4a6:	1f 97       	sbiw	r26, 0x0f	; 15
 4a8:	90 81       	ld	r25, Z

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 4aa:	1d 96       	adiw	r26, 0x0d	; 13
 4ac:	8c 91       	ld	r24, X
 4ae:	1d 97       	sbiw	r26, 0x0d	; 13
 4b0:	98 23       	and	r25, r24
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	71 f4       	brne	.+28     	; 0x4d2 <__vector_3+0x70>
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 4ba:	1e 96       	adiw	r26, 0x0e	; 14
 4bc:	ed 91       	ld	r30, X+
 4be:	fc 91       	ld	r31, X
 4c0:	1f 97       	sbiw	r26, 0x0f	; 15
 4c2:	90 81       	ld	r25, Z

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 4c4:	1d 96       	adiw	r26, 0x0d	; 13
 4c6:	8c 91       	ld	r24, X
 4c8:	1d 97       	sbiw	r26, 0x0d	; 13
 4ca:	98 23       	and	r25, r24
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_3+0x70>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	88 23       	and	r24, r24
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <__vector_3+0x76>
 4d6:	60 c0       	rjmp	.+192    	; 0x598 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 4d8:	53 96       	adiw	r26, 0x13	; 19
 4da:	ed 91       	ld	r30, X+
 4dc:	fc 91       	ld	r31, X
 4de:	54 97       	sbiw	r26, 0x14	; 20
 4e0:	90 81       	ld	r25, Z
 4e2:	55 96       	adiw	r26, 0x15	; 21
 4e4:	8c 91       	ld	r24, X
 4e6:	55 97       	sbiw	r26, 0x15	; 21
 4e8:	80 95       	com	r24
 4ea:	89 23       	and	r24, r25
 4ec:	80 83       	st	Z, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 4ee:	56 96       	adiw	r26, 0x16	; 22
 4f0:	8d 91       	ld	r24, X+
 4f2:	9c 91       	ld	r25, X
 4f4:	57 97       	sbiw	r26, 0x17	; 23
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 4fa:	58 96       	adiw	r26, 0x18	; 24
 4fc:	6d 91       	ld	r22, X+
 4fe:	7c 91       	ld	r23, X
 500:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 502:	1e 96       	adiw	r26, 0x0e	; 14
 504:	cd 91       	ld	r28, X+
 506:	dc 91       	ld	r29, X
 508:	1f 97       	sbiw	r26, 0x0f	; 15
 50a:	1d 96       	adiw	r26, 0x0d	; 13
 50c:	5c 91       	ld	r21, X
 50e:	1d 97       	sbiw	r26, 0x0d	; 13
 510:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	fb 01       	movw	r30, r22
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 51a:	84 2f       	mov	r24, r20
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	95 95       	asr	r25
 520:	87 95       	ror	r24
 522:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 524:	28 81       	ld	r18, Y
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 526:	25 23       	and	r18, r21
 528:	09 f0       	breq	.+2      	; 0x52c <__vector_3+0xca>
        d |= 0x80;
 52a:	40 68       	ori	r20, 0x80	; 128
 52c:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 52e:	91 f7       	brne	.-28     	; 0x514 <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 530:	5e 96       	adiw	r26, 0x1e	; 30
 532:	8c 91       	ld	r24, X
 534:	5e 97       	sbiw	r26, 0x1e	; 30
 536:	81 fd       	sbrc	r24, 1
      d = ~d;
 538:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 53a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZN14SoftwareSerial20_receive_buffer_tailE>
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	8f 73       	andi	r24, 0x3F	; 63
 544:	90 78       	andi	r25, 0x80	; 128
 546:	99 23       	and	r25, r25
 548:	24 f4       	brge	.+8      	; 0x552 <__vector_3+0xf0>
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	80 6c       	ori	r24, 0xC0	; 192
 54e:	9f 6f       	ori	r25, 0xFF	; 255
 550:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
 552:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <_ZN14SoftwareSerial20_receive_buffer_headE>
 556:	28 17       	cp	r18, r24
 558:	49 f0       	breq	.+18     	; 0x56c <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 55a:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <_ZN14SoftwareSerial20_receive_buffer_tailE>
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	e5 53       	subi	r30, 0x35	; 53
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
 566:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ZN14SoftwareSerial20_receive_buffer_tailE>
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 56c:	5e 96       	adiw	r26, 0x1e	; 30
 56e:	8c 91       	ld	r24, X
 570:	5e 97       	sbiw	r26, 0x1e	; 30
 572:	81 60       	ori	r24, 0x01	; 1
 574:	5e 96       	adiw	r26, 0x1e	; 30
 576:	8c 93       	st	X, r24
 578:	5e 97       	sbiw	r26, 0x1e	; 30
 57a:	5a 96       	adiw	r26, 0x1a	; 26
 57c:	8d 91       	ld	r24, X+
 57e:	9c 91       	ld	r25, X
 580:	5b 97       	sbiw	r26, 0x1b	; 27
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 586:	53 96       	adiw	r26, 0x13	; 19
 588:	ed 91       	ld	r30, X+
 58a:	fc 91       	ld	r31, X
 58c:	54 97       	sbiw	r26, 0x14	; 20
 58e:	90 81       	ld	r25, Z
 590:	55 96       	adiw	r26, 0x15	; 21
 592:	8c 91       	ld	r24, X
 594:	89 2b       	or	r24, r25
 596:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <main>:
//PCF8574 expander_gpio(0x3b);
//PCF8574 key_pad(0x3c);
int main(void)
{

	Serial.println("Hello bro");
 5be:	61 e2       	ldi	r22, 0x21	; 33
 5c0:	71 e0       	ldi	r23, 0x01	; 1
 5c2:	8c e2       	ldi	r24, 0x2C	; 44
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN5Print7printlnEPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	2f e9       	ldi	r18, 0x9F	; 159
 5cc:	86 e8       	ldi	r24, 0x86	; 134
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	21 50       	subi	r18, 0x01	; 1
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x12>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x1c>
 5da:	00 00       	nop
	_delay_ms(500);
// 	expander_gpio.pinMode(1, INPUT);
// 	expander_gpio.digitalWrite(1,HIGH);
	/* Setup interrupts */
	DDRD &= ~(1 << PIND2);
 5dc:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PIND2);
 5de:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1 << ISC10);
 5e0:	e9 e6       	ldi	r30, 0x69	; 105
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	84 60       	ori	r24, 0x04	; 4
 5e8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 5ea:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 5ec:	78 94       	sei
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <main+0x30>

000005f0 <__vector_1>:
    while (1) 
    {
    }
}
ISR(INT0_vect)
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
	cli();
 5fe:	f8 94       	cli
 600:	8f e4       	ldi	r24, 0x4F	; 79
 602:	93 ec       	ldi	r25, 0xC3	; 195
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <__vector_1+0x14>
 608:	00 c0       	rjmp	.+0      	; 0x60a <__vector_1+0x1a>
 60a:	00 00       	nop
	_delay_ms(200);
	DDRB = 0xff;
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	84 b9       	out	0x04, r24	; 4
	PORTB ^= 0xff;
 610:	85 b1       	in	r24, 0x05	; 5
 612:	80 95       	com	r24
 614:	85 b9       	out	0x05, r24	; 5
	//expander_gpio.digitalWrite(1,LOW);
	sei();
 616:	78 94       	sei
}
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__tablejump2__>:
 626:	ee 0f       	add	r30, r30
 628:	ff 1f       	adc	r31, r31
 62a:	05 90       	lpm	r0, Z+
 62c:	f4 91       	lpm	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	09 94       	ijmp

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
