
sss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001c78  00001d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  00800152  00800152  00001d5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000104f8  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000291d  00000000  00000000  00012858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cb3  00000000  00000000  00015175  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000159c  00000000  00000000  00018e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004119  00000000  00000000  0001a3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000937e  00000000  00000000  0001e4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  0002785b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__dtors_end>
       4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_1>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_2>
       c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_3>
      10:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_3>
      14:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_3>
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      1c:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__vector_7>
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__vector_16>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_18>
      4c:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_19>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	01 01       	movw	r0, r2
      c6:	61 0c       	add	r6, r1

000000c8 <__ctors_end>:
      c8:	0d 01       	movw	r0, r26

000000ca <__dtors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	11 e0       	ldi	r17, 0x01	; 1
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	e8 e7       	ldi	r30, 0x78	; 120
      de:	fc e1       	ldi	r31, 0x1C	; 28
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	a2 35       	cpi	r26, 0x52	; 82
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
      ec:	22 e0       	ldi	r18, 0x02	; 2
      ee:	a2 e5       	ldi	r26, 0x52	; 82
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	a3 38       	cpi	r26, 0x83	; 131
      f8:	b2 07       	cpc	r27, r18
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	c4 e6       	ldi	r28, 0x64	; 100
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	04 c0       	rjmp	.+8      	; 0x10c <__do_global_ctors+0x10>
     104:	21 97       	sbiw	r28, 0x01	; 1
     106:	fe 01       	movw	r30, r28
     108:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__tablejump2__>
     10c:	c2 36       	cpi	r28, 0x62	; 98
     10e:	d1 07       	cpc	r29, r17
     110:	c9 f7       	brne	.-14     	; 0x104 <__do_global_ctors+0x8>
     112:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
     116:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__do_global_dtors>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <main>:
char number[13] = "+48664059986";


int main(void)
{
	Phone.begin(9600);
     11e:	40 e8       	ldi	r20, 0x80	; 128
     120:	55 e2       	ldi	r21, 0x25	; 37
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	82 e6       	ldi	r24, 0x62	; 98
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 49 03 	call	0x692	; 0x692 <_ZN14SoftwareSerial5beginEl>
	
	
	DDRB |= (1 << PINB0) | (1 << PINB5);
     12e:	84 b1       	in	r24, 0x04	; 4
     130:	81 62       	ori	r24, 0x21	; 33
     132:	84 b9       	out	0x04, r24	; 4
	
	EICRA = (1 << ISC11) | (1 << ISC01) | (1 << ISC00) ;
     134:	8b e0       	ldi	r24, 0x0B	; 11
     136:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = (1 << INT1) | (1 << INT0);
     13a:	83 e0       	ldi	r24, 0x03	; 3
     13c:	8d bb       	out	0x1d, r24	; 29
	PORTD |= (1 << PHOTOCELL) | (1 << REED);
     13e:	8b b1       	in	r24, 0x0b	; 11
     140:	8c 60       	ori	r24, 0x0C	; 12
     142:	8b b9       	out	0x0b, r24	; 11
	
    /* Power management */
//     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
//     sleep_enable();
	sei();
     144:	78 94       	sei
	
    while (1) 
    {
		tone(8,3000);
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	68 eb       	ldi	r22, 0xB8	; 184
     14e:	7b e0       	ldi	r23, 0x0B	; 11
     150:	88 e0       	ldi	r24, 0x08	; 8
     152:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z4tonehjm>
     156:	f7 cf       	rjmp	.-18     	; 0x146 <main+0x28>

00000158 <__vector_1>:
		
    }
	return 0;
}
ISR(INT0_vect)
{
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	2f 93       	push	r18
     164:	3f 93       	push	r19
     166:	4f 93       	push	r20
     168:	5f 93       	push	r21
     16a:	6f 93       	push	r22
     16c:	7f 93       	push	r23
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
	cli();
     17a:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	8f e4       	ldi	r24, 0x4F	; 79
     180:	93 ec       	ldi	r25, 0xC3	; 195
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <__vector_1+0x2a>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <__vector_1+0x34>
     18c:	00 00       	nop
	_delay_ms(4000);
	if (PIND & (1 << REED))
     18e:	4a 9b       	sbis	0x09, 2	; 9
     190:	0a c0       	rjmp	.+20     	; 0x1a6 <__vector_1+0x4e>
	{
		PORTB ^= (1 << PINB5);
     192:	95 b1       	in	r25, 0x05	; 5
     194:	80 e2       	ldi	r24, 0x20	; 32
     196:	89 27       	eor	r24, r25
     198:	85 b9       	out	0x05, r24	; 5
		Phone.println("ATD+ +48664059986;");
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	71 e0       	ldi	r23, 0x01	; 1
     19e:	82 e6       	ldi	r24, 0x62	; 98
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_ZN5Print7printlnEPKc>
	}
	EIFR |= (1 << INTF0);
     1a6:	e0 9a       	sbi	0x1c, 0	; 28
	sei();
     1a8:	78 94       	sei
}
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	bf 91       	pop	r27
     1b0:	af 91       	pop	r26
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	7f 91       	pop	r23
     1b8:	6f 91       	pop	r22
     1ba:	5f 91       	pop	r21
     1bc:	4f 91       	pop	r20
     1be:	3f 91       	pop	r19
     1c0:	2f 91       	pop	r18
     1c2:	0f 90       	pop	r0
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	0f 90       	pop	r0
     1c8:	1f 90       	pop	r1
     1ca:	18 95       	reti

000001cc <__vector_2>:

ISR(INT1_vect)
{
     1cc:	1f 92       	push	r1
     1ce:	0f 92       	push	r0
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	2f 93       	push	r18
     1d8:	8f 93       	push	r24
     1da:	9f 93       	push	r25
	cli();
     1dc:	f8 94       	cli
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	89 e6       	ldi	r24, 0x69	; 105
     1e2:	98 e1       	ldi	r25, 0x18	; 24
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	80 40       	sbci	r24, 0x00	; 0
     1e8:	90 40       	sbci	r25, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <__vector_2+0x18>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <__vector_2+0x22>
     1ee:	00 00       	nop
	_delay_ms(500);

	sei();
     1f0:	78 94       	sei
}
     1f2:	9f 91       	pop	r25
     1f4:	8f 91       	pop	r24
     1f6:	2f 91       	pop	r18
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <_GLOBAL__sub_I_Phone>:
#include "Arduino.h"
#include "MFRC522.h"

#define REED		PIND2
#define PHOTOCELL	PIND3
SoftwareSerial	Phone(4,5);
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	45 e0       	ldi	r20, 0x05	; 5
     206:	64 e0       	ldi	r22, 0x04	; 4
     208:	82 e6       	ldi	r24, 0x62	; 98
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN14SoftwareSerialC1Ehhb>
MFRC522 RFID;
     210:	82 e5       	ldi	r24, 0x52	; 82
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN7MFRC522C1Ev>
     218:	08 95       	ret

0000021a <_GLOBAL__sub_D_Phone>:
#include "Arduino.h"
#include "MFRC522.h"

#define REED		PIND2
#define PHOTOCELL	PIND3
SoftwareSerial	Phone(4,5);
     21a:	82 e6       	ldi	r24, 0x62	; 98
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN14SoftwareSerialD1Ev>
     222:	08 95       	ret

00000224 <_ZN5Print17availableForWriteEv>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	08 95       	ret

0000022a <_ZN5Print5writeEPKhj>:
     22a:	cf 92       	push	r12
     22c:	df 92       	push	r13
     22e:	ef 92       	push	r14
     230:	ff 92       	push	r15
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	6c 01       	movw	r12, r24
     23c:	7a 01       	movw	r14, r20
     23e:	8b 01       	movw	r16, r22
     240:	c0 e0       	ldi	r28, 0x00	; 0
     242:	d0 e0       	ldi	r29, 0x00	; 0
     244:	ce 15       	cp	r28, r14
     246:	df 05       	cpc	r29, r15
     248:	81 f0       	breq	.+32     	; 0x26a <_ZN5Print5writeEPKhj+0x40>
     24a:	d8 01       	movw	r26, r16
     24c:	6d 91       	ld	r22, X+
     24e:	8d 01       	movw	r16, r26
     250:	d6 01       	movw	r26, r12
     252:	ed 91       	ld	r30, X+
     254:	fc 91       	ld	r31, X
     256:	01 90       	ld	r0, Z+
     258:	f0 81       	ld	r31, Z
     25a:	e0 2d       	mov	r30, r0
     25c:	c6 01       	movw	r24, r12
     25e:	09 95       	icall
     260:	89 2b       	or	r24, r25
     262:	11 f0       	breq	.+4      	; 0x268 <_ZN5Print5writeEPKhj+0x3e>
     264:	21 96       	adiw	r28, 0x01	; 1
     266:	ee cf       	rjmp	.-36     	; 0x244 <_ZN5Print5writeEPKhj+0x1a>
     268:	7e 01       	movw	r14, r28
     26a:	c7 01       	movw	r24, r14
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	08 95       	ret

0000027e <_ZN5Print5writeEPKc>:
     27e:	61 15       	cp	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	79 f0       	breq	.+30     	; 0x2a2 <_ZN5Print5writeEPKc+0x24>
     284:	fb 01       	movw	r30, r22
     286:	01 90       	ld	r0, Z+
     288:	00 20       	and	r0, r0
     28a:	e9 f7       	brne	.-6      	; 0x286 <_ZN5Print5writeEPKc+0x8>
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	af 01       	movw	r20, r30
     290:	46 1b       	sub	r20, r22
     292:	57 0b       	sbc	r21, r23
     294:	dc 01       	movw	r26, r24
     296:	ed 91       	ld	r30, X+
     298:	fc 91       	ld	r31, X
     29a:	02 80       	ldd	r0, Z+2	; 0x02
     29c:	f3 81       	ldd	r31, Z+3	; 0x03
     29e:	e0 2d       	mov	r30, r0
     2a0:	09 94       	ijmp
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	08 95       	ret

000002a8 <_ZN5Print7printlnEv>:
     2a8:	64 e1       	ldi	r22, 0x14	; 20
     2aa:	71 e0       	ldi	r23, 0x01	; 1
     2ac:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_ZN5Print5writeEPKc>

000002b0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     2ba:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN5Print5writeEPKc>
     2be:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     2c0:	ce 01       	movw	r24, r28
     2c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN5Print7printlnEv>
  return n;
}
     2c6:	80 0f       	add	r24, r16
     2c8:	91 1f       	adc	r25, r17
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     2d4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     2d8:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     2dc:	28 17       	cp	r18, r24
     2de:	39 07       	cpc	r19, r25
     2e0:	b9 f4       	brne	.+46     	; 0x310 <_ZN14SoftwareSerial4readEv+0x3c>
     2e2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     2e6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     2ea:	98 17       	cp	r25, r24
     2ec:	89 f0       	breq	.+34     	; 0x310 <_ZN14SoftwareSerial4readEv+0x3c>
     2ee:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ed 57       	subi	r30, 0x7D	; 125
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	80 81       	ld	r24, Z
     2fa:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	2f 5f       	subi	r18, 0xFF	; 255
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	2f 73       	andi	r18, 0x3F	; 63
     306:	33 27       	eor	r19, r19
     308:	20 93 81 01 	sts	0x0181, r18	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	9f ef       	ldi	r25, 0xFF	; 255
     314:	08 95       	ret

00000316 <_ZN14SoftwareSerial5writeEh>:
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	dc 01       	movw	r26, r24
     31e:	5c 96       	adiw	r26, 0x1c	; 28
     320:	8d 91       	ld	r24, X+
     322:	9c 91       	ld	r25, X
     324:	5d 97       	sbiw	r26, 0x1d	; 29
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	39 f4       	brne	.+14     	; 0x338 <_ZN14SoftwareSerial5writeEh+0x22>
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	13 96       	adiw	r26, 0x03	; 3
     330:	3c 93       	st	X, r19
     332:	2e 93       	st	-X, r18
     334:	12 97       	sbiw	r26, 0x02	; 2
     336:	3b c0       	rjmp	.+118    	; 0x3ae <_ZN14SoftwareSerial5writeEh+0x98>
     338:	51 96       	adiw	r26, 0x11	; 17
     33a:	ed 91       	ld	r30, X+
     33c:	fc 91       	ld	r31, X
     33e:	52 97       	sbiw	r26, 0x12	; 18
     340:	50 96       	adiw	r26, 0x10	; 16
     342:	2c 91       	ld	r18, X
     344:	50 97       	sbiw	r26, 0x10	; 16
     346:	32 2f       	mov	r19, r18
     348:	30 95       	com	r19
     34a:	1f b7       	in	r17, 0x3f	; 63
     34c:	5e 96       	adiw	r26, 0x1e	; 30
     34e:	4c 91       	ld	r20, X
     350:	5e 97       	sbiw	r26, 0x1e	; 30
     352:	74 2f       	mov	r23, r20
     354:	72 70       	andi	r23, 0x02	; 2
     356:	41 fd       	sbrc	r20, 1
     358:	60 95       	com	r22
     35a:	f8 94       	cli
     35c:	40 81       	ld	r20, Z
     35e:	77 23       	and	r23, r23
     360:	11 f0       	breq	.+4      	; 0x366 <_ZN14SoftwareSerial5writeEh+0x50>
     362:	42 2b       	or	r20, r18
     364:	01 c0       	rjmp	.+2      	; 0x368 <_ZN14SoftwareSerial5writeEh+0x52>
     366:	43 23       	and	r20, r19
     368:	40 83       	st	Z, r20
     36a:	ec 01       	movw	r28, r24
     36c:	21 97       	sbiw	r28, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <_ZN14SoftwareSerial5writeEh+0x56>
     370:	48 e0       	ldi	r20, 0x08	; 8
     372:	50 81       	ld	r21, Z
     374:	60 ff       	sbrs	r22, 0
     376:	02 c0       	rjmp	.+4      	; 0x37c <_ZN14SoftwareSerial5writeEh+0x66>
     378:	52 2b       	or	r21, r18
     37a:	01 c0       	rjmp	.+2      	; 0x37e <_ZN14SoftwareSerial5writeEh+0x68>
     37c:	53 23       	and	r21, r19
     37e:	50 83       	st	Z, r21
     380:	ec 01       	movw	r28, r24
     382:	21 97       	sbiw	r28, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <_ZN14SoftwareSerial5writeEh+0x6c>
     386:	66 95       	lsr	r22
     388:	41 50       	subi	r20, 0x01	; 1
     38a:	99 f7       	brne	.-26     	; 0x372 <_ZN14SoftwareSerial5writeEh+0x5c>
     38c:	80 81       	ld	r24, Z
     38e:	77 23       	and	r23, r23
     390:	19 f0       	breq	.+6      	; 0x398 <_ZN14SoftwareSerial5writeEh+0x82>
     392:	83 23       	and	r24, r19
     394:	80 83       	st	Z, r24
     396:	02 c0       	rjmp	.+4      	; 0x39c <_ZN14SoftwareSerial5writeEh+0x86>
     398:	28 2b       	or	r18, r24
     39a:	20 83       	st	Z, r18
     39c:	1f bf       	out	0x3f, r17	; 63
     39e:	5c 96       	adiw	r26, 0x1c	; 28
     3a0:	8d 91       	ld	r24, X+
     3a2:	9c 91       	ld	r25, X
     3a4:	5d 97       	sbiw	r26, 0x1d	; 29
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <_ZN14SoftwareSerial5writeEh+0x90>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	08 95       	ret

000003b6 <_ZN14SoftwareSerial5flushEv>:
     3b6:	08 95       	ret

000003b8 <_ZN14SoftwareSerial4peekEv>:
     3b8:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     3bc:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     3c0:	28 17       	cp	r18, r24
     3c2:	39 07       	cpc	r19, r25
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <_ZN14SoftwareSerial4peekEv+0x2a>
     3c6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     3ca:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     3ce:	98 17       	cp	r25, r24
     3d0:	41 f0       	breq	.+16     	; 0x3e2 <_ZN14SoftwareSerial4peekEv+0x2a>
     3d2:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	ed 57       	subi	r30, 0x7D	; 125
     3da:	fe 4f       	sbci	r31, 0xFE	; 254
     3dc:	80 81       	ld	r24, Z
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	08 95       	ret
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	9f ef       	ldi	r25, 0xFF	; 255
     3e6:	08 95       	ret

000003e8 <_ZN14SoftwareSerial9availableEv>:
     3e8:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     3ec:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     3f0:	28 17       	cp	r18, r24
     3f2:	39 07       	cpc	r19, r25
     3f4:	71 f4       	brne	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     3fa:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	80 5c       	subi	r24, 0xC0	; 192
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	82 1b       	sub	r24, r18
     406:	91 09       	sbc	r25, r1
     408:	60 e4       	ldi	r22, 0x40	; 64
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__divmodhi4>
     410:	08 95       	ret
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 95       	ret

00000418 <_ZN14SoftwareSerial13stopListeningEv>:
     418:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     41c:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     420:	e8 17       	cp	r30, r24
     422:	f9 07       	cpc	r31, r25
     424:	69 f4       	brne	.+26     	; 0x440 <_ZN14SoftwareSerial13stopListeningEv+0x28>
     426:	a3 89       	ldd	r26, Z+19	; 0x13
     428:	b4 89       	ldd	r27, Z+20	; 0x14
     42a:	9c 91       	ld	r25, X
     42c:	85 89       	ldd	r24, Z+21	; 0x15
     42e:	80 95       	com	r24
     430:	89 23       	and	r24, r25
     432:	8c 93       	st	X, r24
     434:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     438:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	08 95       	ret
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	08 95       	ret

00000444 <_ZN14SoftwareSerial6listenEv>:
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	ec 01       	movw	r28, r24
     44a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     44c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     44e:	89 2b       	or	r24, r25
     450:	f1 f0       	breq	.+60     	; 0x48e <_ZN14SoftwareSerial6listenEv+0x4a>
     452:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     456:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     45a:	c8 17       	cp	r28, r24
     45c:	d9 07       	cpc	r29, r25
     45e:	b9 f0       	breq	.+46     	; 0x48e <_ZN14SoftwareSerial6listenEv+0x4a>
     460:	00 97       	sbiw	r24, 0x00	; 0
     462:	11 f0       	breq	.+4      	; 0x468 <_ZN14SoftwareSerial6listenEv+0x24>
     464:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN14SoftwareSerial13stopListeningEv>
     468:	8e 8d       	ldd	r24, Y+30	; 0x1e
     46a:	8e 7f       	andi	r24, 0xFE	; 254
     46c:	8e 8f       	std	Y+30, r24	; 0x1e
     46e:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     472:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     476:	d0 93 c4 01 	sts	0x01C4, r29	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     47a:	c0 93 c3 01 	sts	0x01C3, r28	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     47e:	eb 89       	ldd	r30, Y+19	; 0x13
     480:	fc 89       	ldd	r31, Y+20	; 0x14
     482:	90 81       	ld	r25, Z
     484:	8d 89       	ldd	r24, Y+21	; 0x15
     486:	89 2b       	or	r24, r25
     488:	80 83       	st	Z, r24
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <_ZN14SoftwareSerial6listenEv+0x4c>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <__vector_3>:
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	5f 93       	push	r21
     4a8:	6f 93       	push	r22
     4aa:	7f 93       	push	r23
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
     4b8:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <_ZN14SoftwareSerial13active_objectE>
     4bc:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <_ZN14SoftwareSerial13active_objectE+0x1>
     4c0:	30 97       	sbiw	r30, 0x00	; 0
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <__vector_3+0x30>
     4c4:	51 c0       	rjmp	.+162    	; 0x568 <__vector_3+0xd2>
     4c6:	96 8d       	ldd	r25, Z+30	; 0x1e
     4c8:	a6 85       	ldd	r26, Z+14	; 0x0e
     4ca:	b7 85       	ldd	r27, Z+15	; 0x0f
     4cc:	85 85       	ldd	r24, Z+13	; 0x0d
     4ce:	91 ff       	sbrs	r25, 1
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__vector_3+0x44>
     4d2:	9c 91       	ld	r25, X
     4d4:	89 23       	and	r24, r25
     4d6:	29 f4       	brne	.+10     	; 0x4e2 <__vector_3+0x4c>
     4d8:	47 c0       	rjmp	.+142    	; 0x568 <__vector_3+0xd2>
     4da:	9c 91       	ld	r25, X
     4dc:	89 23       	and	r24, r25
     4de:	09 f0       	breq	.+2      	; 0x4e2 <__vector_3+0x4c>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <__vector_3+0xd2>
     4e2:	a3 89       	ldd	r26, Z+19	; 0x13
     4e4:	b4 89       	ldd	r27, Z+20	; 0x14
     4e6:	9c 91       	ld	r25, X
     4e8:	85 89       	ldd	r24, Z+21	; 0x15
     4ea:	80 95       	com	r24
     4ec:	89 23       	and	r24, r25
     4ee:	8c 93       	st	X, r24
     4f0:	86 89       	ldd	r24, Z+22	; 0x16
     4f2:	97 89       	ldd	r25, Z+23	; 0x17
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__vector_3+0x5e>
     4f8:	60 8d       	ldd	r22, Z+24	; 0x18
     4fa:	71 8d       	ldd	r23, Z+25	; 0x19
     4fc:	a6 85       	ldd	r26, Z+14	; 0x0e
     4fe:	b7 85       	ldd	r27, Z+15	; 0x0f
     500:	55 85       	ldd	r21, Z+13	; 0x0d
     502:	38 e0       	ldi	r19, 0x08	; 8
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	cb 01       	movw	r24, r22
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <__vector_3+0x72>
     50c:	82 2f       	mov	r24, r18
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	95 95       	asr	r25
     512:	87 95       	ror	r24
     514:	28 2f       	mov	r18, r24
     516:	4c 91       	ld	r20, X
     518:	45 23       	and	r20, r21
     51a:	09 f0       	breq	.+2      	; 0x51e <__vector_3+0x88>
     51c:	20 68       	ori	r18, 0x80	; 128
     51e:	31 50       	subi	r19, 0x01	; 1
     520:	91 f7       	brne	.-28     	; 0x506 <__vector_3+0x70>
     522:	86 8d       	ldd	r24, Z+30	; 0x1e
     524:	81 fd       	sbrc	r24, 1
     526:	20 95       	com	r18
     528:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	8f 73       	andi	r24, 0x3F	; 63
     532:	99 27       	eor	r25, r25
     534:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_ZN14SoftwareSerial20_receive_buffer_headE>
     538:	38 17       	cp	r19, r24
     53a:	49 f0       	breq	.+18     	; 0x54e <__vector_3+0xb8>
     53c:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	ad 57       	subi	r26, 0x7D	; 125
     544:	be 4f       	sbci	r27, 0xFE	; 254
     546:	2c 93       	st	X, r18
     548:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     54c:	03 c0       	rjmp	.+6      	; 0x554 <__vector_3+0xbe>
     54e:	86 8d       	ldd	r24, Z+30	; 0x1e
     550:	81 60       	ori	r24, 0x01	; 1
     552:	86 8f       	std	Z+30, r24	; 0x1e
     554:	82 8d       	ldd	r24, Z+26	; 0x1a
     556:	93 8d       	ldd	r25, Z+27	; 0x1b
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <__vector_3+0xc2>
     55c:	a3 89       	ldd	r26, Z+19	; 0x13
     55e:	b4 89       	ldd	r27, Z+20	; 0x14
     560:	9c 91       	ld	r25, X
     562:	85 89       	ldd	r24, Z+21	; 0x15
     564:	89 2b       	or	r24, r25
     566:	8c 93       	st	X, r24
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	7f 91       	pop	r23
     576:	6f 91       	pop	r22
     578:	5f 91       	pop	r21
     57a:	4f 91       	pop	r20
     57c:	3f 91       	pop	r19
     57e:	2f 91       	pop	r18
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <_ZN14SoftwareSerialD1Ev>:
     58a:	27 e2       	ldi	r18, 0x27	; 39
     58c:	31 e0       	ldi	r19, 0x01	; 1
     58e:	fc 01       	movw	r30, r24
     590:	31 83       	std	Z+1, r19	; 0x01
     592:	20 83       	st	Z, r18
     594:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN14SoftwareSerial13stopListeningEv>

00000598 <_ZN14SoftwareSerial5setTXEh>:
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
     5a0:	16 2f       	mov	r17, r22
     5a2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     5a4:	66 95       	lsr	r22
     5a6:	61 70       	andi	r22, 0x01	; 1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	68 27       	eor	r22, r24
     5ac:	81 2f       	mov	r24, r17
     5ae:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	81 2f       	mov	r24, r17
     5b6:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     5ba:	81 2f       	mov	r24, r17
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	e3 58       	subi	r30, 0x83	; 131
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	e4 91       	lpm	r30, Z
     5c6:	e8 8b       	std	Y+16, r30	; 0x10
     5c8:	fc 01       	movw	r30, r24
     5ca:	ef 56       	subi	r30, 0x6F	; 111
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	e4 91       	lpm	r30, Z
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	e1 55       	subi	r30, 0x51	; 81
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	85 91       	lpm	r24, Z+
     5dc:	94 91       	lpm	r25, Z
     5de:	9a 8b       	std	Y+18, r25	; 0x12
     5e0:	89 8b       	std	Y+17, r24	; 0x11
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	08 95       	ret

000005ea <_ZN14SoftwareSerial5setRXEh>:
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	16 2f       	mov	r17, r22
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	81 2f       	mov	r24, r17
     5f8:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     5fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5fe:	81 fd       	sbrc	r24, 1
     600:	04 c0       	rjmp	.+8      	; 0x60a <_ZN14SoftwareSerial5setRXEh+0x20>
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	81 2f       	mov	r24, r17
     606:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
     60a:	1c 87       	std	Y+12, r17	; 0x0c
     60c:	81 2f       	mov	r24, r17
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	fc 01       	movw	r30, r24
     612:	e3 58       	subi	r30, 0x83	; 131
     614:	ff 4f       	sbci	r31, 0xFF	; 255
     616:	e4 91       	lpm	r30, Z
     618:	ed 87       	std	Y+13, r30	; 0x0d
     61a:	fc 01       	movw	r30, r24
     61c:	ef 56       	subi	r30, 0x6F	; 111
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	e4 91       	lpm	r30, Z
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	eb 55       	subi	r30, 0x5B	; 91
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	85 91       	lpm	r24, Z+
     62e:	94 91       	lpm	r25, Z
     630:	9f 87       	std	Y+15, r25	; 0x0f
     632:	8e 87       	std	Y+14, r24	; 0x0e
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <_ZN14SoftwareSerialC1Ehhb>:
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
     644:	16 2f       	mov	r17, r22
     646:	1b 82       	std	Y+3, r1	; 0x03
     648:	1a 82       	std	Y+2, r1	; 0x02
     64a:	88 ee       	ldi	r24, 0xE8	; 232
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	8c 83       	std	Y+4, r24	; 0x04
     654:	9d 83       	std	Y+5, r25	; 0x05
     656:	ae 83       	std	Y+6, r26	; 0x06
     658:	bf 83       	std	Y+7, r27	; 0x07
     65a:	87 e2       	ldi	r24, 0x27	; 39
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	99 83       	std	Y+1, r25	; 0x01
     660:	88 83       	st	Y, r24
     662:	1f 8a       	std	Y+23, r1	; 0x17
     664:	1e 8a       	std	Y+22, r1	; 0x16
     666:	19 8e       	std	Y+25, r1	; 0x19
     668:	18 8e       	std	Y+24, r1	; 0x18
     66a:	1b 8e       	std	Y+27, r1	; 0x1b
     66c:	1a 8e       	std	Y+26, r1	; 0x1a
     66e:	1d 8e       	std	Y+29, r1	; 0x1d
     670:	1c 8e       	std	Y+28, r1	; 0x1c
     672:	8e 8d       	ldd	r24, Y+30	; 0x1e
     674:	8e 7f       	andi	r24, 0xFE	; 254
     676:	20 fb       	bst	r18, 0
     678:	81 f9       	bld	r24, 1
     67a:	8e 8f       	std	Y+30, r24	; 0x1e
     67c:	64 2f       	mov	r22, r20
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN14SoftwareSerial5setTXEh>
     684:	61 2f       	mov	r22, r17
     686:	ce 01       	movw	r24, r28
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_ZN14SoftwareSerial5setRXEh>

00000692 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	9a 01       	movw	r18, r20
     69a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     69c:	1b 8e       	std	Y+27, r1	; 0x1b
     69e:	1a 8e       	std	Y+26, r1	; 0x1a
     6a0:	19 8e       	std	Y+25, r1	; 0x19
     6a2:	18 8e       	std	Y+24, r1	; 0x18
     6a4:	1f 8a       	std	Y+23, r1	; 0x17
     6a6:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	79 e0       	ldi	r23, 0x09	; 9
     6ac:	8d e3       	ldi	r24, 0x3D	; 61
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     6b4:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     6b6:	24 30       	cpi	r18, 0x04	; 4
     6b8:	31 05       	cpc	r19, r1
     6ba:	18 f0       	brcs	.+6      	; 0x6c2 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     6bc:	c9 01       	movw	r24, r18
     6be:	03 97       	sbiw	r24, 0x03	; 3
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     6c6:	9d 8f       	std	Y+29, r25	; 0x1d
     6c8:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
     6ca:	6c 85       	ldd	r22, Y+12	; 0x0c
     6cc:	66 31       	cpi	r22, 0x16	; 22
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <_ZN14SoftwareSerial5beginEl+0x40>
     6d0:	69 c0       	rjmp	.+210    	; 0x7a4 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     6d2:	c9 01       	movw	r24, r18
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     6d8:	84 31       	cpi	r24, 0x14	; 20
     6da:	91 05       	cpc	r25, r1
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
     6de:	43 97       	sbiw	r24, 0x13	; 19
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     6e6:	9f 8b       	std	Y+23, r25	; 0x17
     6e8:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     6ea:	36 97       	sbiw	r30, 0x06	; 6
     6ec:	18 f0       	brcs	.+6      	; 0x6f4 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
     6ee:	c9 01       	movw	r24, r18
     6f0:	05 97       	sbiw	r24, 0x05	; 5
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     6f8:	99 8f       	std	Y+25, r25	; 0x19
     6fa:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     6fc:	c9 01       	movw	r24, r18
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	28 0f       	add	r18, r24
     704:	39 1f       	adc	r19, r25
     706:	36 95       	lsr	r19
     708:	27 95       	ror	r18
     70a:	36 95       	lsr	r19
     70c:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     70e:	2d 30       	cpi	r18, 0x0D	; 13
     710:	31 05       	cpc	r19, r1
     712:	18 f0       	brcs	.+6      	; 0x71a <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
     714:	2c 50       	subi	r18, 0x0C	; 12
     716:	31 09       	sbc	r19, r1
     718:	02 c0       	rjmp	.+4      	; 0x71e <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     71e:	3b 8f       	std	Y+27, r19	; 0x1b
     720:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     722:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     726:	68 30       	cpi	r22, 0x08	; 8
     728:	50 f0       	brcs	.+20     	; 0x73e <_ZN14SoftwareSerial5beginEl+0xac>
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	6e 30       	cpi	r22, 0x0E	; 14
     72e:	08 f4       	brcc	.+2      	; 0x732 <_ZN14SoftwareSerial5beginEl+0xa0>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	01 c0       	rjmp	.+2      	; 0x738 <_ZN14SoftwareSerial5beginEl+0xa6>
     736:	88 0f       	add	r24, r24
     738:	2a 95       	dec	r18
     73a:	ea f7       	brpl	.-6      	; 0x736 <_ZN14SoftwareSerial5beginEl+0xa4>
     73c:	01 c0       	rjmp	.+2      	; 0x740 <_ZN14SoftwareSerial5beginEl+0xae>
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	89 2b       	or	r24, r25
     742:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     746:	9c 85       	ldd	r25, Y+12	; 0x0c
     748:	98 30       	cpi	r25, 0x08	; 8
     74a:	38 f0       	brcs	.+14     	; 0x75a <_ZN14SoftwareSerial5beginEl+0xc8>
     74c:	9e 30       	cpi	r25, 0x0E	; 14
     74e:	40 f0       	brcs	.+16     	; 0x760 <_ZN14SoftwareSerial5beginEl+0xce>
     750:	96 31       	cpi	r25, 0x16	; 22
     752:	48 f0       	brcs	.+18     	; 0x766 <_ZN14SoftwareSerial5beginEl+0xd4>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	08 c0       	rjmp	.+16     	; 0x76a <_ZN14SoftwareSerial5beginEl+0xd8>
     75a:	2d e6       	ldi	r18, 0x6D	; 109
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	05 c0       	rjmp	.+10     	; 0x76a <_ZN14SoftwareSerial5beginEl+0xd8>
     760:	2b e6       	ldi	r18, 0x6B	; 107
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	02 c0       	rjmp	.+4      	; 0x76a <_ZN14SoftwareSerial5beginEl+0xd8>
     766:	2c e6       	ldi	r18, 0x6C	; 108
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	3c 8b       	std	Y+20, r19	; 0x14
     76c:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     76e:	98 30       	cpi	r25, 0x08	; 8
     770:	30 f4       	brcc	.+12     	; 0x77e <_ZN14SoftwareSerial5beginEl+0xec>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	01 c0       	rjmp	.+2      	; 0x778 <_ZN14SoftwareSerial5beginEl+0xe6>
     776:	88 0f       	add	r24, r24
     778:	9a 95       	dec	r25
     77a:	ea f7       	brpl	.-6      	; 0x776 <_ZN14SoftwareSerial5beginEl+0xe4>
     77c:	0e c0       	rjmp	.+28     	; 0x79a <_ZN14SoftwareSerial5beginEl+0x108>
     77e:	29 2f       	mov	r18, r25
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	9e 30       	cpi	r25, 0x0E	; 14
     784:	18 f4       	brcc	.+6      	; 0x78c <_ZN14SoftwareSerial5beginEl+0xfa>
     786:	28 50       	subi	r18, 0x08	; 8
     788:	31 09       	sbc	r19, r1
     78a:	02 c0       	rjmp	.+4      	; 0x790 <_ZN14SoftwareSerial5beginEl+0xfe>
     78c:	2e 50       	subi	r18, 0x0E	; 14
     78e:	31 09       	sbc	r19, r1
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	01 c0       	rjmp	.+2      	; 0x796 <_ZN14SoftwareSerial5beginEl+0x104>
     794:	88 0f       	add	r24, r24
     796:	2a 95       	dec	r18
     798:	ea f7       	brpl	.-6      	; 0x794 <_ZN14SoftwareSerial5beginEl+0x102>
     79a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     79c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     79e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     7a4:	ce 01       	movw	r24, r28
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     7aa:	0c 94 22 02 	jmp	0x444	; 0x444 <_ZN14SoftwareSerial6listenEv>

000007ae <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
     7ae:	4f 92       	push	r4
     7b0:	5f 92       	push	r5
     7b2:	6f 92       	push	r6
     7b4:	7f 92       	push	r7
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <_Z4tonehjm+0x22>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <_Z4tonehjm+0x24>
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	8b 01       	movw	r16, r22
     7da:	29 01       	movw	r4, r18
     7dc:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7de:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     7e2:	89 17       	cp	r24, r25
     7e4:	21 f0       	breq	.+8      	; 0x7ee <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
     7e6:	9f 3f       	cpi	r25, 0xFF	; 255
     7e8:	09 f0       	breq	.+2      	; 0x7ec <_Z4tonehjm+0x3e>
     7ea:	4d c2       	rjmp	.+1178   	; 0xc86 <__stack+0x387>
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
     7ee:	e8 e6       	ldi	r30, 0x68	; 104
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	24 91       	lpm	r18, Z
     7f4:	2d 83       	std	Y+5, r18	; 0x05
     7f6:	84 c0       	rjmp	.+264    	; 0x900 <__stack+0x1>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
     7f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7fc:	e8 e6       	ldi	r30, 0x68	; 104
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	94 91       	lpm	r25, Z
     802:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
     804:	9f 3f       	cpi	r25, 0xFF	; 255
     806:	09 f4       	brne	.+2      	; 0x80a <_Z4tonehjm+0x5c>
     808:	3e c2       	rjmp	.+1148   	; 0xc86 <__stack+0x387>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
     80a:	91 30       	cpi	r25, 0x01	; 1
     80c:	09 f4       	brne	.+2      	; 0x810 <_Z4tonehjm+0x62>
     80e:	4d c0       	rjmp	.+154    	; 0x8aa <_Z4tonehjm+0xfc>
     810:	58 f1       	brcs	.+86     	; 0x868 <_Z4tonehjm+0xba>
     812:	92 30       	cpi	r25, 0x02	; 2
     814:	09 f0       	breq	.+2      	; 0x818 <_Z4tonehjm+0x6a>
     816:	74 c0       	rjmp	.+232    	; 0x900 <__stack+0x1>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
     818:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
        TCCR2B = 0;
     81c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
        bitWrite(TCCR2A, WGM21, 1);
     820:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     824:	92 60       	ori	r25, 0x02	; 2
     826:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
        bitWrite(TCCR2B, CS20, 1);
     82a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     82e:	91 60       	ori	r25, 0x01	; 1
     830:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	f9 01       	movw	r30, r18
     83a:	ef 56       	subi	r30, 0x6F	; 111
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	e4 91       	lpm	r30, Z
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	e1 55       	subi	r30, 0x51	; 81
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	45 91       	lpm	r20, Z+
     84c:	54 91       	lpm	r21, Z
     84e:	50 93 c7 01 	sts	0x01C7, r21	; 0x8001c7 <timer2_pin_port+0x1>
     852:	40 93 c6 01 	sts	0x01C6, r20	; 0x8001c6 <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
     856:	f9 01       	movw	r30, r18
     858:	e3 58       	subi	r30, 0x83	; 131
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	e4 91       	lpm	r30, Z
     85e:	e0 93 c5 01 	sts	0x01C5, r30	; 0x8001c5 <timer2_pin_mask>
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	9d 83       	std	Y+5, r25	; 0x05
     866:	0b c2       	rjmp	.+1046   	; 0xc7e <__stack+0x37f>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
     868:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
     86a:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
     86c:	94 b5       	in	r25, 0x24	; 36
     86e:	92 60       	ori	r25, 0x02	; 2
     870:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
     872:	95 b5       	in	r25, 0x25	; 37
     874:	91 60       	ori	r25, 0x01	; 1
     876:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	f9 01       	movw	r30, r18
     87e:	ef 56       	subi	r30, 0x6F	; 111
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	e4 91       	lpm	r30, Z
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	e1 55       	subi	r30, 0x51	; 81
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	45 91       	lpm	r20, Z+
     890:	54 91       	lpm	r21, Z
     892:	50 93 d5 01 	sts	0x01D5, r21	; 0x8001d5 <timer0_pin_port+0x1>
     896:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
     89a:	f9 01       	movw	r30, r18
     89c:	e3 58       	subi	r30, 0x83	; 131
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	e4 91       	lpm	r30, Z
     8a2:	e0 93 d3 01 	sts	0x01D3, r30	; 0x8001d3 <timer0_pin_mask>
     8a6:	1d 82       	std	Y+5, r1	; 0x05
     8a8:	ea c1       	rjmp	.+980    	; 0xc7e <__stack+0x37f>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
     8aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
        TCCR1B = 0;
     8ae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        bitWrite(TCCR1B, WGM12, 1);
     8b2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     8b6:	98 60       	ori	r25, 0x08	; 8
     8b8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        bitWrite(TCCR1B, CS10, 1);
     8bc:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     8c0:	91 60       	ori	r25, 0x01	; 1
     8c2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
     8c6:	28 2f       	mov	r18, r24
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	f9 01       	movw	r30, r18
     8cc:	ef 56       	subi	r30, 0x6F	; 111
     8ce:	ff 4f       	sbci	r31, 0xFF	; 255
     8d0:	e4 91       	lpm	r30, Z
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	e1 55       	subi	r30, 0x51	; 81
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	45 91       	lpm	r20, Z+
     8de:	54 91       	lpm	r21, Z
     8e0:	50 93 ce 01 	sts	0x01CE, r21	; 0x8001ce <timer1_pin_port+0x1>
     8e4:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
     8e8:	f9 01       	movw	r30, r18
     8ea:	e3 58       	subi	r30, 0x83	; 131
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	e4 91       	lpm	r30, Z
     8f0:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <timer1_pin_mask>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	89 c0       	rjmp	.+274    	; 0xa12 <__stack+0x113>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
     900:	2d 81       	ldd	r18, Y+5	; 0x05
     902:	27 fd       	sbrc	r18, 7
     904:	c0 c1       	rjmp	.+896    	; 0xc86 <__stack+0x387>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
     90e:	8d 7f       	andi	r24, 0xFD	; 253
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	7f c0       	rjmp	.+254    	; 0xa12 <__stack+0x113>
    {
      ocr = F_CPU / frequency / 2 - 1;
     914:	48 01       	movw	r8, r16
     916:	a1 2c       	mov	r10, r1
     918:	b1 2c       	mov	r11, r1
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	72 e1       	ldi	r23, 0x12	; 18
     91e:	8a e7       	ldi	r24, 0x7A	; 122
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a5 01       	movw	r20, r10
     924:	94 01       	movw	r18, r8
     926:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     92a:	29 83       	std	Y+1, r18	; 0x01
     92c:	3a 83       	std	Y+2, r19	; 0x02
     92e:	4b 83       	std	Y+3, r20	; 0x03
     930:	5c 83       	std	Y+4, r21	; 0x04
     932:	69 01       	movw	r12, r18
     934:	7a 01       	movw	r14, r20
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	c8 1a       	sub	r12, r24
     93a:	d1 08       	sbc	r13, r1
     93c:	e1 08       	sbc	r14, r1
     93e:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
     940:	9f ef       	ldi	r25, 0xFF	; 255
     942:	c9 16       	cp	r12, r25
     944:	d1 04       	cpc	r13, r1
     946:	e1 04       	cpc	r14, r1
     948:	f1 04       	cpc	r15, r1
     94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
     94c:	08 f4       	brcc	.+2      	; 0x950 <__stack+0x51>
     94e:	4e c0       	rjmp	.+156    	; 0x9ec <__stack+0xed>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
     950:	60 e4       	ldi	r22, 0x40	; 64
     952:	72 e4       	ldi	r23, 0x42	; 66
     954:	8f e0       	ldi	r24, 0x0F	; 15
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a5 01       	movw	r20, r10
     95a:	94 01       	movw	r18, r8
     95c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     960:	69 01       	movw	r12, r18
     962:	7a 01       	movw	r14, r20
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	c8 1a       	sub	r12, r24
     968:	d1 08       	sbc	r13, r1
     96a:	e1 08       	sbc	r14, r1
     96c:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
     96e:	9d 81       	ldd	r25, Y+5	; 0x05
     970:	92 30       	cpi	r25, 0x02	; 2
     972:	09 f5       	brne	.+66     	; 0x9b6 <__stack+0xb7>
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	c2 16       	cp	r12, r18
     978:	d1 04       	cpc	r13, r1
     97a:	e1 04       	cpc	r14, r1
     97c:	f1 04       	cpc	r15, r1
     97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x83>
     980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x85>
     982:	44 c1       	rjmp	.+648    	; 0xc0c <__stack+0x30d>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
     984:	60 e9       	ldi	r22, 0x90	; 144
     986:	70 ed       	ldi	r23, 0xD0	; 208
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a5 01       	movw	r20, r10
     98e:	94 01       	movw	r18, r8
     990:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     994:	69 01       	movw	r12, r18
     996:	7a 01       	movw	r14, r20
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	c8 1a       	sub	r12, r24
     99c:	d1 08       	sbc	r13, r1
     99e:	e1 08       	sbc	r14, r1
     9a0:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
     9a4:	c9 16       	cp	r12, r25
     9a6:	d1 04       	cpc	r13, r1
     9a8:	e1 04       	cpc	r14, r1
     9aa:	f1 04       	cpc	r15, r1
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <__stack+0xb3>
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	ba c0       	rjmp	.+372    	; 0xb26 <__stack+0x227>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	27 c0       	rjmp	.+78     	; 0xa04 <__stack+0x105>
        }

        if (ocr > 255)
     9b6:	2f ef       	ldi	r18, 0xFF	; 255
     9b8:	c2 16       	cp	r12, r18
     9ba:	d1 04       	cpc	r13, r1
     9bc:	e1 04       	cpc	r14, r1
     9be:	f1 04       	cpc	r15, r1
     9c0:	b9 f0       	breq	.+46     	; 0x9f0 <__stack+0xf1>
     9c2:	b0 f0       	brcs	.+44     	; 0x9f0 <__stack+0xf1>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     9c4:	68 e4       	ldi	r22, 0x48	; 72
     9c6:	78 ee       	ldi	r23, 0xE8	; 232
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a5 01       	movw	r20, r10
     9ce:	94 01       	movw	r18, r8
     9d0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     9d4:	69 01       	movw	r12, r18
     9d6:	7a 01       	movw	r14, r20
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	c8 1a       	sub	r12, r24
     9dc:	d1 08       	sbc	r13, r1
     9de:	e1 08       	sbc	r14, r1
     9e0:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     9e2:	9d 81       	ldd	r25, Y+5	; 0x05
     9e4:	99 23       	and	r25, r25
     9e6:	09 f4       	brne	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	13 c1       	rjmp	.+550    	; 0xc10 <__stack+0x311>
     9ea:	dc c0       	rjmp	.+440    	; 0xba4 <__stack+0x2a5>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__stack+0xf3>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
     9f0:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
     9f2:	9d 81       	ldd	r25, Y+5	; 0x05
     9f4:	91 11       	cpse	r25, r1
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <__stack+0x105>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
     9f8:	95 b5       	in	r25, 0x25	; 37
     9fa:	98 7f       	andi	r25, 0xF8	; 248
     9fc:	89 2b       	or	r24, r25
     9fe:	85 bd       	out	0x25, r24	; 37
     a00:	44 c0       	rjmp	.+136    	; 0xa8a <__stack+0x18b>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
     a02:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
     a04:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     a08:	98 7f       	andi	r25, 0xF8	; 248
     a0a:	89 2b       	or	r24, r25
     a0c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     a10:	3c c0       	rjmp	.+120    	; 0xa8a <__stack+0x18b>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
     a12:	48 01       	movw	r8, r16
     a14:	a1 2c       	mov	r10, r1
     a16:	b1 2c       	mov	r11, r1
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	72 e1       	ldi	r23, 0x12	; 18
     a1c:	8a e7       	ldi	r24, 0x7A	; 122
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a5 01       	movw	r20, r10
     a22:	94 01       	movw	r18, r8
     a24:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     a28:	69 01       	movw	r12, r18
     a2a:	7a 01       	movw	r14, r20
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	c8 1a       	sub	r12, r24
     a30:	d1 08       	sbc	r13, r1
     a32:	e1 08       	sbc	r14, r1
     a34:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
     a36:	c1 14       	cp	r12, r1
     a38:	d1 04       	cpc	r13, r1
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	e9 06       	cpc	r14, r25
     a3e:	f1 04       	cpc	r15, r1
     a40:	88 f0       	brcs	.+34     	; 0xa64 <__stack+0x165>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
     a42:	68 e4       	ldi	r22, 0x48	; 72
     a44:	78 ee       	ldi	r23, 0xE8	; 232
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	a5 01       	movw	r20, r10
     a4c:	94 01       	movw	r18, r8
     a4e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     a52:	69 01       	movw	r12, r18
     a54:	7a 01       	movw	r14, r20
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	c8 1a       	sub	r12, r24
     a5a:	d1 08       	sbc	r13, r1
     a5c:	e1 08       	sbc	r14, r1
     a5e:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <__stack+0x167>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
     a64:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
     a66:	9d 81       	ldd	r25, Y+5	; 0x05
     a68:	91 30       	cpi	r25, 0x01	; 1
     a6a:	79 f4       	brne	.+30     	; 0xa8a <__stack+0x18b>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
     a6c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     a70:	98 7f       	andi	r25, 0xF8	; 248
     a72:	89 2b       	or	r24, r25
     a74:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

    }
    

    // Calculate the toggle count
    if (duration > 0)
     a78:	41 14       	cp	r4, r1
     a7a:	51 04       	cpc	r5, r1
     a7c:	61 04       	cpc	r6, r1
     a7e:	71 04       	cpc	r7, r1
     a80:	49 f4       	brne	.+18     	; 0xa94 <__stack+0x195>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
     a82:	2f ef       	ldi	r18, 0xFF	; 255
     a84:	3f ef       	ldi	r19, 0xFF	; 255
     a86:	a9 01       	movw	r20, r18
     a88:	2c c0       	rjmp	.+88     	; 0xae2 <__stack+0x1e3>

    }
    

    // Calculate the toggle count
    if (duration > 0)
     a8a:	41 14       	cp	r4, r1
     a8c:	51 04       	cpc	r5, r1
     a8e:	61 04       	cpc	r6, r1
     a90:	71 04       	cpc	r7, r1
     a92:	71 f0       	breq	.+28     	; 0xab0 <__stack+0x1b1>
    {
      toggle_count = 2 * frequency * duration / 1000;
     a94:	d8 01       	movw	r26, r16
     a96:	aa 0f       	add	r26, r26
     a98:	bb 1f       	adc	r27, r27
     a9a:	a3 01       	movw	r20, r6
     a9c:	92 01       	movw	r18, r4
     a9e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__muluhisi3>
     aa2:	28 ee       	ldi	r18, 0xE8	; 232
     aa4:	33 e0       	ldi	r19, 0x03	; 3
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__udivmodsi4>
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <__stack+0x1b7>
    }
    else
    {
      toggle_count = -1;
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	99 f0       	breq	.+38     	; 0xae2 <__stack+0x1e3>
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	19 f1       	breq	.+70     	; 0xb06 <__stack+0x207>
     ac0:	81 11       	cpse	r24, r1
     ac2:	e1 c0       	rjmp	.+450    	; 0xc86 <__stack+0x387>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
     ac4:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
     ac6:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <timer0_toggle_count>
     aca:	30 93 d7 01 	sts	0x01D7, r19	; 0x8001d7 <timer0_toggle_count+0x1>
     ace:	40 93 d8 01 	sts	0x01D8, r20	; 0x8001d8 <timer0_toggle_count+0x2>
     ad2:	50 93 d9 01 	sts	0x01D9, r21	; 0x8001d9 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
     ad6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
        break;
     ae0:	d2 c0       	rjmp	.+420    	; 0xc86 <__stack+0x387>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
     ae2:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     ae6:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
        timer1_toggle_count = toggle_count;
     aea:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <timer1_toggle_count>
     aee:	30 93 d0 01 	sts	0x01D0, r19	; 0x8001d0 <timer1_toggle_count+0x1>
     af2:	40 93 d1 01 	sts	0x01D1, r20	; 0x8001d1 <timer1_toggle_count+0x2>
     af6:	50 93 d2 01 	sts	0x01D2, r21	; 0x8001d2 <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
     afa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     afe:	82 60       	ori	r24, 0x02	; 2
     b00:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
     b04:	c0 c0       	rjmp	.+384    	; 0xc86 <__stack+0x387>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
     b06:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
        timer2_toggle_count = toggle_count;
     b0a:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <timer2_toggle_count>
     b0e:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <timer2_toggle_count+0x1>
     b12:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <timer2_toggle_count+0x2>
     b16:	50 93 cb 01 	sts	0x01CB, r21	; 0x8001cb <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
     b1a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     b1e:	82 60       	ori	r24, 0x02	; 2
     b20:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
        break;
#endif

    }
  }
}
     b24:	b0 c0       	rjmp	.+352    	; 0xc86 <__stack+0x387>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     b26:	68 e4       	ldi	r22, 0x48	; 72
     b28:	78 ee       	ldi	r23, 0xE8	; 232
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a5 01       	movw	r20, r10
     b30:	94 01       	movw	r18, r8
     b32:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     b36:	69 01       	movw	r12, r18
     b38:	7a 01       	movw	r14, r20
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	c9 1a       	sub	r12, r25
     b3e:	d1 08       	sbc	r13, r1
     b40:	e1 08       	sbc	r14, r1
     b42:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	c2 16       	cp	r12, r18
     b48:	d1 04       	cpc	r13, r1
     b4a:	e1 04       	cpc	r14, r1
     b4c:	f1 04       	cpc	r15, r1
     b4e:	41 f1       	breq	.+80     	; 0xba0 <__stack+0x2a1>
     b50:	38 f1       	brcs	.+78     	; 0xba0 <__stack+0x2a1>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
     b52:	64 e2       	ldi	r22, 0x24	; 36
     b54:	74 ef       	ldi	r23, 0xF4	; 244
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a5 01       	movw	r20, r10
     b5c:	94 01       	movw	r18, r8
     b5e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     b62:	69 01       	movw	r12, r18
     b64:	7a 01       	movw	r14, r20
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	c8 1a       	sub	r12, r24
     b6a:	d1 08       	sbc	r13, r1
     b6c:	e1 08       	sbc	r14, r1
     b6e:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
     b70:	9f ef       	ldi	r25, 0xFF	; 255
     b72:	c9 16       	cp	r12, r25
     b74:	d1 04       	cpc	r13, r1
     b76:	e1 04       	cpc	r14, r1
     b78:	f1 04       	cpc	r15, r1
     b7a:	09 f0       	breq	.+2      	; 0xb7e <__stack+0x27f>
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <__stack+0x281>
     b7e:	41 cf       	rjmp	.-382    	; 0xa02 <__stack+0x103>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     b80:	62 e1       	ldi	r22, 0x12	; 18
     b82:	7a e7       	ldi	r23, 0x7A	; 122
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a5 01       	movw	r20, r10
     b8a:	94 01       	movw	r18, r8
     b8c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     b90:	69 01       	movw	r12, r18
     b92:	7a 01       	movw	r14, r20
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	c8 1a       	sub	r12, r24
     b98:	d1 08       	sbc	r13, r1
     b9a:	e1 08       	sbc	r14, r1
     b9c:	f1 08       	sbc	r15, r1
     b9e:	19 c0       	rjmp	.+50     	; 0xbd2 <__stack+0x2d3>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	30 cf       	rjmp	.-416    	; 0xa04 <__stack+0x105>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
     ba4:	2f ef       	ldi	r18, 0xFF	; 255
     ba6:	c2 16       	cp	r12, r18
     ba8:	d1 04       	cpc	r13, r1
     baa:	e1 04       	cpc	r14, r1
     bac:	f1 04       	cpc	r15, r1
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__stack+0x2b3>
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__stack+0x2b5>
     bb2:	63 c0       	rjmp	.+198    	; 0xc7a <__stack+0x37b>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     bb4:	62 e1       	ldi	r22, 0x12	; 18
     bb6:	7a e7       	ldi	r23, 0x7A	; 122
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a5 01       	movw	r20, r10
     bbe:	94 01       	movw	r18, r8
     bc0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     bc4:	69 01       	movw	r12, r18
     bc6:	7a 01       	movw	r14, r20
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	c9 1a       	sub	r12, r25
     bcc:	d1 08       	sbc	r13, r1
     bce:	e1 08       	sbc	r14, r1
     bd0:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	c8 16       	cp	r12, r24
     bd6:	d1 04       	cpc	r13, r1
     bd8:	e1 04       	cpc	r14, r1
     bda:	f1 04       	cpc	r15, r1
     bdc:	a9 f0       	breq	.+42     	; 0xc08 <__stack+0x309>
     bde:	a0 f0       	brcs	.+40     	; 0xc08 <__stack+0x309>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	ab 81       	ldd	r26, Y+3	; 0x03
     be6:	bc 81       	ldd	r27, Y+4	; 0x04
     be8:	2a e0       	ldi	r18, 0x0A	; 10
     bea:	b5 95       	asr	r27
     bec:	a7 95       	ror	r26
     bee:	97 95       	ror	r25
     bf0:	87 95       	ror	r24
     bf2:	2a 95       	dec	r18
     bf4:	d1 f7       	brne	.-12     	; 0xbea <__stack+0x2eb>
     bf6:	6c 01       	movw	r12, r24
     bf8:	7d 01       	movw	r14, r26
     bfa:	21 e0       	ldi	r18, 0x01	; 1
     bfc:	c2 1a       	sub	r12, r18
     bfe:	d1 08       	sbc	r13, r1
     c00:	e1 08       	sbc	r14, r1
     c02:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
     c04:	87 e0       	ldi	r24, 0x07	; 7
     c06:	fe ce       	rjmp	.-516    	; 0xa04 <__stack+0x105>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
     c08:	86 e0       	ldi	r24, 0x06	; 6
     c0a:	fc ce       	rjmp	.-520    	; 0xa04 <__stack+0x105>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	fa ce       	rjmp	.-524    	; 0xa04 <__stack+0x105>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	c8 16       	cp	r12, r24
     c14:	d1 04       	cpc	r13, r1
     c16:	e1 04       	cpc	r14, r1
     c18:	f1 04       	cpc	r15, r1
     c1a:	69 f1       	breq	.+90     	; 0xc76 <__stack+0x377>
     c1c:	60 f1       	brcs	.+88     	; 0xc76 <__stack+0x377>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     c1e:	62 e1       	ldi	r22, 0x12	; 18
     c20:	7a e7       	ldi	r23, 0x7A	; 122
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a5 01       	movw	r20, r10
     c28:	94 01       	movw	r18, r8
     c2a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__divmodsi4>
     c2e:	69 01       	movw	r12, r18
     c30:	7a 01       	movw	r14, r20
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	c9 1a       	sub	r12, r25
     c36:	d1 08       	sbc	r13, r1
     c38:	e1 08       	sbc	r14, r1
     c3a:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
     c3c:	2f ef       	ldi	r18, 0xFF	; 255
     c3e:	c2 16       	cp	r12, r18
     c40:	d1 04       	cpc	r13, r1
     c42:	e1 04       	cpc	r14, r1
     c44:	f1 04       	cpc	r15, r1
     c46:	a9 f0       	breq	.+42     	; 0xc72 <__stack+0x373>
     c48:	a0 f0       	brcs	.+40     	; 0xc72 <__stack+0x373>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	ab 81       	ldd	r26, Y+3	; 0x03
     c50:	bc 81       	ldd	r27, Y+4	; 0x04
     c52:	3a e0       	ldi	r19, 0x0A	; 10
     c54:	b5 95       	asr	r27
     c56:	a7 95       	ror	r26
     c58:	97 95       	ror	r25
     c5a:	87 95       	ror	r24
     c5c:	3a 95       	dec	r19
     c5e:	d1 f7       	brne	.-12     	; 0xc54 <__stack+0x355>
     c60:	6c 01       	movw	r12, r24
     c62:	7d 01       	movw	r14, r26
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	c2 1a       	sub	r12, r18
     c68:	d1 08       	sbc	r13, r1
     c6a:	e1 08       	sbc	r14, r1
     c6c:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
     c6e:	85 e0       	ldi	r24, 0x05	; 5
     c70:	c3 ce       	rjmp	.-634    	; 0x9f8 <__stack+0xf9>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	c1 ce       	rjmp	.-638    	; 0x9f8 <__stack+0xf9>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	bf ce       	rjmp	.-642    	; 0x9f8 <__stack+0xf9>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	ba ce       	rjmp	.-652    	; 0x9f2 <__stack+0xf3>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     c84:	47 ce       	rjmp	.-882    	; 0x914 <__stack+0x15>
        break;
#endif

    }
  }
}
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	7f 90       	pop	r7
     caa:	6f 90       	pop	r6
     cac:	5f 90       	pop	r5
     cae:	4f 90       	pop	r4
     cb0:	08 95       	ret

00000cb2 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	39 f0       	breq	.+14     	; 0xcc4 <_Z12disableTimerh+0x12>
     cb6:	18 f0       	brcs	.+6      	; 0xcbe <_Z12disableTimerh+0xc>
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	51 f0       	breq	.+20     	; 0xcd0 <_Z12disableTimerh+0x1e>
     cbc:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     cbe:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     cc2:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     cc4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     cc8:	8d 7f       	andi	r24, 0xFD	; 253
     cca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
      break;
     cce:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     cd0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     cd4:	8d 7f       	andi	r24, 0xFD	; 253
     cd6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     ce0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     ce4:	88 7f       	andi	r24, 0xF8	; 248
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     cec:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     cf0:	08 95       	ret

00000cf2 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     cf2:	cf 93       	push	r28
     cf4:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     cf6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cfa:	c8 13       	cpse	r28, r24
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     cfe:	e8 e6       	ldi	r30, 0x68	; 104
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
      break;
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     d0e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	8c 2f       	mov	r24, r28
}
     d16:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
     d18:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <digitalWrite>

00000d1c <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	5f 93       	push	r21
     d2e:	6f 93       	push	r22
     d30:	7f 93       	push	r23
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     d3e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <timer2_toggle_count>
     d42:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <timer2_toggle_count+0x1>
     d46:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <timer2_toggle_count+0x2>
     d4a:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <timer2_toggle_count+0x3>
     d4e:	89 2b       	or	r24, r25
     d50:	8a 2b       	or	r24, r26
     d52:	8b 2b       	or	r24, r27
     d54:	51 f1       	breq	.+84     	; 0xdaa <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     d56:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <timer2_pin_mask>
     d5a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <timer2_pin_port>
     d5e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <timer2_pin_port+0x1>
     d62:	80 81       	ld	r24, Z
     d64:	89 27       	eor	r24, r25
     d66:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     d68:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <timer2_toggle_count>
     d6c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <timer2_toggle_count+0x1>
     d70:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <timer2_toggle_count+0x2>
     d74:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <timer2_toggle_count+0x3>
     d78:	18 16       	cp	r1, r24
     d7a:	19 06       	cpc	r1, r25
     d7c:	1a 06       	cpc	r1, r26
     d7e:	1b 06       	cpc	r1, r27
     d80:	c4 f4       	brge	.+48     	; 0xdb2 <__vector_7+0x96>
      timer2_toggle_count--;
     d82:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <timer2_toggle_count>
     d86:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <timer2_toggle_count+0x1>
     d8a:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <timer2_toggle_count+0x2>
     d8e:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <timer2_toggle_count+0x3>
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	a1 09       	sbc	r26, r1
     d96:	b1 09       	sbc	r27, r1
     d98:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <timer2_toggle_count>
     d9c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <timer2_toggle_count+0x1>
     da0:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <timer2_toggle_count+0x2>
     da4:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <timer2_toggle_count+0x3>
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     daa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dae:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <turnOffPWM+0x24>
     dd8:	28 f4       	brcc	.+10     	; 0xde4 <turnOffPWM+0x10>
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	99 f0       	breq	.+38     	; 0xe04 <turnOffPWM+0x30>
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	a1 f0       	breq	.+40     	; 0xe0a <turnOffPWM+0x36>
     de2:	08 95       	ret
     de4:	87 30       	cpi	r24, 0x07	; 7
     de6:	a9 f0       	breq	.+42     	; 0xe12 <turnOffPWM+0x3e>
     de8:	88 30       	cpi	r24, 0x08	; 8
     dea:	b9 f0       	breq	.+46     	; 0xe1a <turnOffPWM+0x46>
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	d1 f4       	brne	.+52     	; 0xe24 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     df0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     df4:	8f 7d       	andi	r24, 0xDF	; 223
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     df8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     dfc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     dfe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     e02:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     e04:	84 b5       	in	r24, 0x24	; 36
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     e0a:	84 b5       	in	r24, 0x24	; 36
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	84 bd       	out	0x24, r24	; 36
     e10:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e16:	8f 77       	andi	r24, 0x7F	; 127
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e1e:	8f 7d       	andi	r24, 0xDF	; 223
     e20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e24:	08 95       	ret

00000e26 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	e3 58       	subi	r30, 0x83	; 131
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e34:	fc 01       	movw	r30, r24
     e36:	ef 56       	subi	r30, 0x6F	; 111
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e3c:	88 23       	and	r24, r24
     e3e:	61 f1       	breq	.+88     	; 0xe98 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	fc 01       	movw	r30, r24
     e48:	e7 54       	subi	r30, 0x47	; 71
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	c5 91       	lpm	r28, Z+
     e4e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e50:	fc 01       	movw	r30, r24
     e52:	e1 55       	subi	r30, 0x51	; 81
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	a5 91       	lpm	r26, Z+
     e58:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     e5a:	61 11       	cpse	r22, r1
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     e5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e60:	f8 94       	cli
		*reg &= ~bit;
     e62:	88 81       	ld	r24, Y
     e64:	20 95       	com	r18
     e66:	82 23       	and	r24, r18
     e68:	88 83       	st	Y, r24
		*out &= ~bit;
     e6a:	ec 91       	ld	r30, X
     e6c:	2e 23       	and	r18, r30
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     e70:	62 30       	cpi	r22, 0x02	; 2
     e72:	61 f4       	brne	.+24     	; 0xe8c <pinMode+0x66>
		uint8_t oldSREG = SREG;
     e74:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e76:	f8 94       	cli
		*reg &= ~bit;
     e78:	88 81       	ld	r24, Y
     e7a:	32 2f       	mov	r19, r18
     e7c:	30 95       	com	r19
     e7e:	83 23       	and	r24, r19
     e80:	88 83       	st	Y, r24
		*out |= bit;
     e82:	ec 91       	ld	r30, X
     e84:	2e 2b       	or	r18, r30
     e86:	2c 93       	st	X, r18
		SREG = oldSREG;
     e88:	9f bf       	out	0x3f, r25	; 63
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     e8c:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e8e:	f8 94       	cli
		*reg |= bit;
     e90:	e8 81       	ld	r30, Y
     e92:	2e 2b       	or	r18, r30
     e94:	28 83       	st	Y, r18
		SREG = oldSREG;
     e96:	8f bf       	out	0x3f, r24	; 63
	}
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	e7 59       	subi	r30, 0x97	; 151
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     eb0:	f9 01       	movw	r30, r18
     eb2:	e3 58       	subi	r30, 0x83	; 131
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     eb8:	f9 01       	movw	r30, r18
     eba:	ef 56       	subi	r30, 0x6F	; 111
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ec0:	cc 23       	and	r28, r28
     ec2:	c1 f0       	breq	.+48     	; 0xef4 <digitalWrite+0x56>
     ec4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ec6:	81 11       	cpse	r24, r1
     ec8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <turnOffPWM>

	out = portOutputRegister(port);
     ecc:	ec 2f       	mov	r30, r28
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	e1 55       	subi	r30, 0x51	; 81
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	a5 91       	lpm	r26, Z+
     eda:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     edc:	9f b7       	in	r25, 0x3f	; 63
	cli();
     ede:	f8 94       	cli

	if (val == LOW) {
     ee0:	11 11       	cpse	r17, r1
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <digitalWrite+0x4e>
		*out &= ~bit;
     ee4:	8c 91       	ld	r24, X
     ee6:	d0 95       	com	r29
     ee8:	d8 23       	and	r29, r24
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <digitalWrite+0x52>
	} else {
		*out |= bit;
     eec:	ec 91       	ld	r30, X
     eee:	de 2b       	or	r29, r30
     ef0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     ef2:	9f bf       	out	0x3f, r25	; 63
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	08 95       	ret

00000efc <_ZN7MFRC52219PICC_ReadCardSerialEv>:
	}
	if (cmdBuffer[0] != MF_ACK) {
		return STATUS_MIFARE_NACK;
	}
	return STATUS_OK;
} // End PCD_MIFARE_Transceive()
     efc:	bc 01       	movw	r22, r24
     efe:	6e 5f       	subi	r22, 0xFE	; 254
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	dc 01       	movw	r26, r24
     f04:	ed 91       	ld	r30, X+
     f06:	fc 91       	ld	r31, X
     f08:	01 90       	ld	r0, Z+
     f0a:	f0 81       	ld	r31, Z
     f0c:	e0 2d       	mov	r30, r0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	09 95       	icall
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	81 11       	cpse	r24, r1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	89 2f       	mov	r24, r25
     f1a:	08 95       	ret

00000f1c <_ZN8SPIClass16beginTransactionE11SPISettings>:
     f1c:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <_ZN8SPIClass13interruptModeE>
     f20:	22 23       	and	r18, r18
     f22:	99 f0       	breq	.+38     	; 0xf4a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     f24:	4f b7       	in	r20, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <_ZN8SPIClass13interruptModeE>
     f2c:	21 30       	cpi	r18, 0x01	; 1
     f2e:	59 f4       	brne	.+22     	; 0xf46 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     f30:	2d b3       	in	r18, 0x1d	; 29
     f32:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <_ZN8SPIClass13interruptSaveE>
     f36:	3d b3       	in	r19, 0x1d	; 29
     f38:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <_ZN8SPIClass13interruptMaskE>
     f3c:	20 95       	com	r18
     f3e:	23 23       	and	r18, r19
     f40:	2d bb       	out	0x1d, r18	; 29
     f42:	4f bf       	out	0x3f, r20	; 63
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     f46:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <_ZN8SPIClass13interruptSaveE>
     f4a:	8c bd       	out	0x2c, r24	; 44
     f4c:	9d bd       	out	0x2d, r25	; 45
     f4e:	08 95       	ret

00000f50 <_ZN8SPIClass8transferEh>:
     f50:	8e bd       	out	0x2e, r24	; 46
     f52:	00 00       	nop
     f54:	0d b4       	in	r0, 0x2d	; 45
     f56:	07 fe       	sbrs	r0, 7
     f58:	fd cf       	rjmp	.-6      	; 0xf54 <_ZN8SPIClass8transferEh+0x4>
     f5a:	8e b5       	in	r24, 0x2e	; 46
     f5c:	08 95       	ret

00000f5e <_ZN8SPIClass14endTransactionEv>:
     f5e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN8SPIClass13interruptModeE>
     f62:	88 23       	and	r24, r24
     f64:	61 f0       	breq	.+24     	; 0xf7e <_ZN8SPIClass14endTransactionEv+0x20>
     f66:	9f b7       	in	r25, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <_ZN8SPIClass13interruptModeE>
     f6e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <_ZN8SPIClass13interruptSaveE>
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	19 f4       	brne	.+6      	; 0xf7c <_ZN8SPIClass14endTransactionEv+0x1e>
     f76:	8d bb       	out	0x1d, r24	; 29
     f78:	9f bf       	out	0x3f, r25	; 63
     f7a:	08 95       	ret
     f7c:	8f bf       	out	0x3f, r24	; 63
     f7e:	08 95       	ret

00000f80 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	6c 01       	movw	r12, r24
     f96:	a4 2e       	mov	r10, r20
     f98:	79 01       	movw	r14, r18
     f9a:	60 68       	ori	r22, 0x80	; 128
     f9c:	b6 2e       	mov	r11, r22
     f9e:	83 e5       	ldi	r24, 0x53	; 83
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN8SPIClass16beginTransactionE11SPISettings>
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	f6 01       	movw	r30, r12
     faa:	86 85       	ldd	r24, Z+14	; 0x0e
     fac:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
     fb0:	aa 94       	dec	r10
     fb2:	8b 2d       	mov	r24, r11
     fb4:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
     fb8:	00 23       	and	r16, r16
     fba:	a1 f0       	breq	.+40     	; 0xfe4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
     fbc:	cf ef       	ldi	r28, 0xFF	; 255
     fbe:	d0 e0       	ldi	r29, 0x00	; 0
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
     fc2:	cc 0f       	add	r28, r28
     fc4:	0a 95       	dec	r16
     fc6:	ea f7       	brpl	.-6      	; 0xfc2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
     fc8:	8b 2d       	mov	r24, r11
     fca:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
     fce:	2c 2f       	mov	r18, r28
     fd0:	20 95       	com	r18
     fd2:	f7 01       	movw	r30, r14
     fd4:	90 81       	ld	r25, Z
     fd6:	92 23       	and	r25, r18
     fd8:	8c 23       	and	r24, r28
     fda:	89 2b       	or	r24, r25
     fdc:	f7 01       	movw	r30, r14
     fde:	80 83       	st	Z, r24
     fe0:	11 e0       	ldi	r17, 0x01	; 1
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	81 2f       	mov	r24, r17
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	e7 01       	movw	r28, r14
     fec:	c8 0f       	add	r28, r24
     fee:	d9 1f       	adc	r29, r25
     ff0:	1a 15       	cp	r17, r10
     ff2:	30 f4       	brcc	.+12     	; 0x1000 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
     ff4:	8b 2d       	mov	r24, r11
     ff6:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
     ffa:	88 83       	st	Y, r24
     ffc:	1f 5f       	subi	r17, 0xFF	; 255
     ffe:	f3 cf       	rjmp	.-26     	; 0xfe6 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    1006:	88 83       	st	Y, r24
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	f6 01       	movw	r30, r12
    100c:	86 85       	ldd	r24, Z+14	; 0x0e
    100e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <_ZN8SPIClass14endTransactionEv>

0000102a <_ZN7MFRC522C1Ev>:
    102a:	fc 01       	movw	r30, r24
    102c:	89 e3       	ldi	r24, 0x39	; 57
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
    1034:	8a e0       	ldi	r24, 0x0A	; 10
    1036:	86 87       	std	Z+14, r24	; 0x0e
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	87 87       	std	Z+15, r24	; 0x0f
    103c:	08 95       	ret

0000103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	ec 01       	movw	r28, r24
    1048:	06 2f       	mov	r16, r22
    104a:	14 2f       	mov	r17, r20
    104c:	83 e5       	ldi	r24, 0x53	; 83
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN8SPIClass16beginTransactionE11SPISettings>
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	8e 85       	ldd	r24, Y+14	; 0x0e
    1058:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    105c:	80 2f       	mov	r24, r16
    105e:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    1062:	81 2f       	mov	r24, r17
    1064:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	8e 85       	ldd	r24, Y+14	; 0x0e
    106c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <_ZN8SPIClass14endTransactionEv>

0000107c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	8c 01       	movw	r16, r24
    108c:	c6 2f       	mov	r28, r22
    108e:	f4 2e       	mov	r15, r20
    1090:	d2 2e       	mov	r13, r18
    1092:	e3 2e       	mov	r14, r19
    1094:	83 e5       	ldi	r24, 0x53	; 83
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN8SPIClass16beginTransactionE11SPISettings>
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	f8 01       	movw	r30, r16
    10a0:	86 85       	ldd	r24, Z+14	; 0x0e
    10a2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    10a6:	8c 2f       	mov	r24, r28
    10a8:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    10ac:	cd 2d       	mov	r28, r13
    10ae:	de 2d       	mov	r29, r14
    10b0:	ce 01       	movw	r24, r28
    10b2:	8f 0d       	add	r24, r15
    10b4:	91 1d       	adc	r25, r1
    10b6:	7c 01       	movw	r14, r24
    10b8:	ec 16       	cp	r14, r28
    10ba:	fd 06       	cpc	r15, r29
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    10be:	89 91       	ld	r24, Y+
    10c0:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    10c4:	f9 cf       	rjmp	.-14     	; 0x10b8 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	f8 01       	movw	r30, r16
    10ca:	86 85       	ldd	r24, Z+14	; 0x0e
    10cc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <_ZN8SPIClass14endTransactionEv>

000010e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
    10ea:	16 2f       	mov	r17, r22
    10ec:	83 e5       	ldi	r24, 0x53	; 83
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN8SPIClass16beginTransactionE11SPISettings>
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    10f8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    10fc:	81 2f       	mov	r24, r17
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN8SPIClass8transferEh>
    110a:	18 2f       	mov	r17, r24
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1110:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1114:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN8SPIClass14endTransactionEv>
    1118:	81 2f       	mov	r24, r17
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	08 95       	ret

00001122 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    1122:	0f 93       	push	r16
    1124:	41 11       	cpse	r20, r1
    1126:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	8c 01       	movw	r16, r24
    1138:	d6 2f       	mov	r29, r22
    113a:	c4 2f       	mov	r28, r20
    113c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1140:	48 2f       	mov	r20, r24
    1142:	4c 2b       	or	r20, r28
    1144:	6d 2f       	mov	r22, r29
    1146:	c8 01       	movw	r24, r16
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00001154 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	8c 01       	movw	r16, r24
    115e:	d6 2f       	mov	r29, r22
    1160:	c4 2f       	mov	r28, r20
    1162:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1166:	c0 95       	com	r28
    1168:	4c 2f       	mov	r20, r28
    116a:	48 23       	and	r20, r24
    116c:	6d 2f       	mov	r22, r29
    116e:	c8 01       	movw	r24, r16
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

0000117c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	6b 01       	movw	r12, r22
    1190:	14 2f       	mov	r17, r20
    1192:	79 01       	movw	r14, r18
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	62 e0       	ldi	r22, 0x02	; 2
    1198:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    119c:	44 e0       	ldi	r20, 0x04	; 4
    119e:	6a e0       	ldi	r22, 0x0A	; 10
    11a0:	ce 01       	movw	r24, r28
    11a2:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	64 e1       	ldi	r22, 0x14	; 20
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    11b0:	96 01       	movw	r18, r12
    11b2:	41 2f       	mov	r20, r17
    11b4:	62 e1       	ldi	r22, 0x12	; 18
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    11bc:	43 e0       	ldi	r20, 0x03	; 3
    11be:	62 e0       	ldi	r22, 0x02	; 2
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    11c6:	08 e8       	ldi	r16, 0x88	; 136
    11c8:	13 e1       	ldi	r17, 0x13	; 19
    11ca:	6a e0       	ldi	r22, 0x0A	; 10
    11cc:	ce 01       	movw	r24, r28
    11ce:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    11d2:	82 ff       	sbrs	r24, 2
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x80>
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	62 e0       	ldi	r22, 0x02	; 2
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    11e0:	64 e4       	ldi	r22, 0x44	; 68
    11e2:	ce 01       	movw	r24, r28
    11e4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    11e8:	f7 01       	movw	r30, r14
    11ea:	80 83       	st	Z, r24
    11ec:	62 e4       	ldi	r22, 0x42	; 66
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    11f4:	f7 01       	movw	r30, r14
    11f6:	81 83       	std	Z+1, r24	; 0x01
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x88>
    11fc:	01 50       	subi	r16, 0x01	; 1
    11fe:	11 09       	sbc	r17, r1
    1200:	21 f7       	brne	.-56     	; 0x11ca <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x4e>
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	08 95       	ret

00001216 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	6f 92       	push	r6
    121e:	7f 92       	push	r7
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	3c 01       	movw	r6, r24
    1240:	16 2f       	mov	r17, r22
    1242:	94 2e       	mov	r9, r20
    1244:	29 01       	movw	r4, r18
    1246:	a1 14       	cp	r10, r1
    1248:	b1 04       	cpc	r11, r1
    124a:	19 f0       	breq	.+6      	; 0x1252 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3c>
    124c:	f5 01       	movw	r30, r10
    124e:	40 81       	ld	r20, Z
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	34 2e       	mov	r3, r20
    1256:	f0 e1       	ldi	r31, 0x10	; 16
    1258:	8f 9e       	mul	r8, r31
    125a:	30 0c       	add	r3, r0
    125c:	11 24       	eor	r1, r1
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	c3 01       	movw	r24, r6
    1264:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	68 e0       	ldi	r22, 0x08	; 8
    126c:	c3 01       	movw	r24, r6
    126e:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	64 e1       	ldi	r22, 0x14	; 20
    1276:	c3 01       	movw	r24, r6
    1278:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    127c:	92 01       	movw	r18, r4
    127e:	40 2f       	mov	r20, r16
    1280:	62 e1       	ldi	r22, 0x12	; 18
    1282:	c3 01       	movw	r24, r6
    1284:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    1288:	43 2d       	mov	r20, r3
    128a:	6a e1       	ldi	r22, 0x1A	; 26
    128c:	c3 01       	movw	r24, r6
    128e:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1292:	41 2f       	mov	r20, r17
    1294:	62 e0       	ldi	r22, 0x02	; 2
    1296:	c3 01       	movw	r24, r6
    1298:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    129c:	1c 30       	cpi	r17, 0x0C	; 12
    129e:	29 f4       	brne	.+10     	; 0x12aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x94>
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	6a e1       	ldi	r22, 0x1A	; 26
    12a4:	c3 01       	movw	r24, r6
    12a6:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    12aa:	00 ed       	ldi	r16, 0xD0	; 208
    12ac:	17 e0       	ldi	r17, 0x07	; 7
    12ae:	68 e0       	ldi	r22, 0x08	; 8
    12b0:	c3 01       	movw	r24, r6
    12b2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    12b6:	98 2f       	mov	r25, r24
    12b8:	99 21       	and	r25, r9
    12ba:	39 f4       	brne	.+14     	; 0x12ca <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    12bc:	80 fd       	sbrc	r24, 0
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    12c0:	01 50       	subi	r16, 0x01	; 1
    12c2:	11 09       	sbc	r17, r1
    12c4:	a1 f7       	brne	.-24     	; 0x12ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x98>
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	65 c0       	rjmp	.+202    	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    12ca:	6c e0       	ldi	r22, 0x0C	; 12
    12cc:	c3 01       	movw	r24, r6
    12ce:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    12d2:	18 2f       	mov	r17, r24
    12d4:	83 71       	andi	r24, 0x13	; 19
    12d6:	09 f0       	breq	.+2      	; 0x12da <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    12d8:	5a c0       	rjmp	.+180    	; 0x138e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x178>
    12da:	e1 14       	cp	r14, r1
    12dc:	f1 04       	cpc	r15, r1
    12de:	f9 f0       	breq	.+62     	; 0x131e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    12e0:	c1 14       	cp	r12, r1
    12e2:	d1 04       	cpc	r13, r1
    12e4:	e1 f0       	breq	.+56     	; 0x131e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    12e6:	64 e1       	ldi	r22, 0x14	; 20
    12e8:	c3 01       	movw	r24, r6
    12ea:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    12ee:	f6 01       	movw	r30, r12
    12f0:	90 81       	ld	r25, Z
    12f2:	98 17       	cp	r25, r24
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    12f6:	45 c0       	rjmp	.+138    	; 0x1382 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16c>
    12f8:	80 83       	st	Z, r24
    12fa:	08 2d       	mov	r16, r8
    12fc:	97 01       	movw	r18, r14
    12fe:	48 2f       	mov	r20, r24
    1300:	62 e1       	ldi	r22, 0x12	; 18
    1302:	c3 01       	movw	r24, r6
    1304:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    1308:	68 e1       	ldi	r22, 0x18	; 24
    130a:	c3 01       	movw	r24, r6
    130c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	a1 14       	cp	r10, r1
    1314:	b1 04       	cpc	r11, r1
    1316:	21 f0       	breq	.+8      	; 0x1320 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    1318:	f5 01       	movw	r30, r10
    131a:	80 83       	st	Z, r24
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	13 fd       	sbrc	r17, 3
    1322:	31 c0       	rjmp	.+98     	; 0x1386 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    1324:	e1 14       	cp	r14, r1
    1326:	f1 04       	cpc	r15, r1
    1328:	81 f1       	breq	.+96     	; 0x138a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    132a:	c1 14       	cp	r12, r1
    132c:	d1 04       	cpc	r13, r1
    132e:	69 f1       	breq	.+90     	; 0x138a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1330:	9e 89       	ldd	r25, Y+22	; 0x16
    1332:	99 23       	and	r25, r25
    1334:	51 f1       	breq	.+84     	; 0x138a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1336:	f6 01       	movw	r30, r12
    1338:	40 81       	ld	r20, Z
    133a:	41 30       	cpi	r20, 0x01	; 1
    133c:	21 f4       	brne	.+8      	; 0x1346 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x130>
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	41 f5       	brne	.+80     	; 0x1392 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	27 c0       	rjmp	.+78     	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1346:	42 30       	cpi	r20, 0x02	; 2
    1348:	20 f1       	brcs	.+72     	; 0x1392 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    134a:	81 11       	cpse	r24, r1
    134c:	22 c0       	rjmp	.+68     	; 0x1392 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    134e:	42 50       	subi	r20, 0x02	; 2
    1350:	9e 01       	movw	r18, r28
    1352:	2f 5f       	subi	r18, 0xFF	; 255
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	b7 01       	movw	r22, r14
    1358:	c3 01       	movw	r24, r6
    135a:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    135e:	81 11       	cpse	r24, r1
    1360:	19 c0       	rjmp	.+50     	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1362:	f6 01       	movw	r30, r12
    1364:	80 81       	ld	r24, Z
    1366:	e8 0e       	add	r14, r24
    1368:	f1 1c       	adc	r15, r1
    136a:	f7 01       	movw	r30, r14
    136c:	32 97       	sbiw	r30, 0x02	; 2
    136e:	90 81       	ld	r25, Z
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	98 13       	cpse	r25, r24
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1376:	31 96       	adiw	r30, 0x01	; 1
    1378:	90 81       	ld	r25, Z
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	98 13       	cpse	r25, r24
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1380:	04 c0       	rjmp	.+8      	; 0x138a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1392:	87 e0       	ldi	r24, 0x07	; 7
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	bf 90       	pop	r11
    13aa:	af 90       	pop	r10
    13ac:	9f 90       	pop	r9
    13ae:	8f 90       	pop	r8
    13b0:	7f 90       	pop	r7
    13b2:	6f 90       	pop	r6
    13b4:	5f 90       	pop	r5
    13b6:	4f 90       	pop	r4
    13b8:	3f 90       	pop	r3
    13ba:	08 95       	ret

000013bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    13bc:	8f 92       	push	r8
    13be:	af 92       	push	r10
    13c0:	bf 92       	push	r11
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	af 92       	push	r10
    13d0:	8c 2c       	mov	r8, r12
    13d2:	57 01       	movw	r10, r14
    13d4:	68 01       	movw	r12, r16
    13d6:	79 01       	movw	r14, r18
    13d8:	04 2f       	mov	r16, r20
    13da:	9b 01       	movw	r18, r22
    13dc:	40 e3       	ldi	r20, 0x30	; 48
    13de:	6c e0       	ldi	r22, 0x0C	; 12
    13e0:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    13e4:	0f 90       	pop	r0
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	af 90       	pop	r10
    13f6:	8f 90       	pop	r8
    13f8:	08 95       	ret

000013fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    13fa:	2f 92       	push	r2
    13fc:	3f 92       	push	r3
    13fe:	4f 92       	push	r4
    1400:	5f 92       	push	r5
    1402:	6f 92       	push	r6
    1404:	7f 92       	push	r7
    1406:	8f 92       	push	r8
    1408:	9f 92       	push	r9
    140a:	af 92       	push	r10
    140c:	bf 92       	push	r11
    140e:	cf 92       	push	r12
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	2c 97       	sbiw	r28, 0x0c	; 12
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	41 35       	cpi	r20, 0x51	; 81
    1430:	08 f0       	brcs	.+2      	; 0x1434 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    1432:	05 c1       	rjmp	.+522    	; 0x163e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x244>
    1434:	34 2e       	mov	r3, r20
    1436:	3b 01       	movw	r6, r22
    1438:	4c 01       	movw	r8, r24
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	6c e1       	ldi	r22, 0x1C	; 28
    143e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    1442:	22 24       	eor	r2, r2
    1444:	23 94       	inc	r2
    1446:	32 e0       	ldi	r19, 0x02	; 2
    1448:	23 16       	cp	r2, r19
    144a:	91 f0       	breq	.+36     	; 0x1470 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x76>
    144c:	83 e0       	ldi	r24, 0x03	; 3
    144e:	28 16       	cp	r2, r24
    1450:	e1 f0       	breq	.+56     	; 0x148a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x90>
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	29 12       	cpse	r2, r25
    1456:	f7 c0       	rjmp	.+494    	; 0x1646 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    1458:	83 e9       	ldi	r24, 0x93	; 147
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	33 20       	and	r3, r3
    145e:	d1 f0       	breq	.+52     	; 0x1494 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	f3 01       	movw	r30, r6
    1464:	90 81       	ld	r25, Z
    1466:	95 30       	cpi	r25, 0x05	; 5
    1468:	08 f4       	brcc	.+2      	; 0x146c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	b1 2c       	mov	r11, r1
    146e:	17 c0       	rjmp	.+46     	; 0x149e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    1470:	f5 e9       	ldi	r31, 0x95	; 149
    1472:	f9 83       	std	Y+1, r31	; 0x01
    1474:	33 20       	and	r3, r3
    1476:	81 f0       	breq	.+32     	; 0x1498 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9e>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	f3 01       	movw	r30, r6
    147c:	90 81       	ld	r25, Z
    147e:	98 30       	cpi	r25, 0x08	; 8
    1480:	08 f4       	brcc	.+2      	; 0x1484 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8a>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	43 e0       	ldi	r20, 0x03	; 3
    1486:	b4 2e       	mov	r11, r20
    1488:	0a c0       	rjmp	.+20     	; 0x149e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    148a:	87 e9       	ldi	r24, 0x97	; 151
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	36 e0       	ldi	r19, 0x06	; 6
    1490:	b3 2e       	mov	r11, r19
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    1494:	b1 2c       	mov	r11, r1
    1496:	02 c0       	rjmp	.+4      	; 0x149c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    1498:	23 e0       	ldi	r18, 0x03	; 3
    149a:	b2 2e       	mov	r11, r18
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	d3 2c       	mov	r13, r3
    14a0:	f8 e0       	ldi	r31, 0x08	; 8
    14a2:	bf 9e       	mul	r11, r31
    14a4:	d0 18       	sub	r13, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	d7 fc       	sbrc	r13, 7
    14aa:	d1 2c       	mov	r13, r1
    14ac:	88 23       	and	r24, r24
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    14b0:	98 e8       	ldi	r25, 0x88	; 136
    14b2:	9b 83       	std	Y+3, r25	; 0x03
    14b4:	33 e0       	ldi	r19, 0x03	; 3
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc0>
    14b8:	32 e0       	ldi	r19, 0x02	; 2
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	9d 2d       	mov	r25, r13
    14be:	97 70       	andi	r25, 0x07	; 7
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xca>
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	9d 2d       	mov	r25, r13
    14c6:	95 95       	asr	r25
    14c8:	95 95       	asr	r25
    14ca:	95 95       	asr	r25
    14cc:	29 0f       	add	r18, r25
    14ce:	31 f4       	brne	.+12     	; 0x14dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe2>
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xdc>
    14d4:	91 c0       	rjmp	.+290    	; 0x15f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    14d6:	38 e0       	ldi	r19, 0x08	; 8
    14d8:	d3 0e       	add	r13, r19
    14da:	8e c0       	rjmp	.+284    	; 0x15f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    14dc:	81 11       	cpse	r24, r1
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    14e0:	94 e0       	ldi	r25, 0x04	; 4
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xec>
    14e4:	93 e0       	ldi	r25, 0x03	; 3
    14e6:	29 17       	cp	r18, r25
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
    14ea:	92 2f       	mov	r25, r18
    14ec:	eb 2d       	mov	r30, r11
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	31 96       	adiw	r30, 0x01	; 1
    14f2:	e6 0d       	add	r30, r6
    14f4:	f7 1d       	adc	r31, r7
    14f6:	23 2f       	mov	r18, r19
    14f8:	41 91       	ld	r20, Z+
    14fa:	a1 e0       	ldi	r26, 0x01	; 1
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ac 0f       	add	r26, r28
    1500:	bd 1f       	adc	r27, r29
    1502:	a2 0f       	add	r26, r18
    1504:	b1 1d       	adc	r27, r1
    1506:	4c 93       	st	X, r20
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	42 2f       	mov	r20, r18
    150c:	43 1b       	sub	r20, r19
    150e:	49 17       	cp	r20, r25
    1510:	98 f3       	brcs	.-26     	; 0x14f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfe>
    1512:	de cf       	rjmp	.-68     	; 0x14d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd6>
    1514:	81 11       	cpse	r24, r1
    1516:	dd c0       	rjmp	.+442    	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    1518:	9f e1       	ldi	r25, 0x1F	; 31
    151a:	9d 15       	cp	r25, r13
    151c:	0c f4       	brge	.+2      	; 0x1520 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x126>
    151e:	95 c0       	rjmp	.+298    	; 0x164a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    1520:	80 e2       	ldi	r24, 0x20	; 32
    1522:	d8 2e       	mov	r13, r24
    1524:	90 e7       	ldi	r25, 0x70	; 112
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	89 27       	eor	r24, r25
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	89 27       	eor	r24, r25
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	89 27       	eor	r24, r25
    1536:	8f 83       	std	Y+7, r24	; 0x07
    1538:	9e 01       	movw	r18, r28
    153a:	28 5f       	subi	r18, 0xF8	; 248
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	47 e0       	ldi	r20, 0x07	; 7
    1540:	be 01       	movw	r22, r28
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	c4 01       	movw	r24, r8
    1548:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    154c:	81 11       	cpse	r24, r1
    154e:	c1 c0       	rjmp	.+386    	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    1550:	1b 86       	std	Y+11, r1	; 0x0b
    1552:	e3 e0       	ldi	r30, 0x03	; 3
    1554:	ea 87       	std	Y+10, r30	; 0x0a
    1556:	ce 01       	movw	r24, r28
    1558:	07 96       	adiw	r24, 0x07	; 7
    155a:	2c 01       	movw	r4, r24
    155c:	99 e0       	ldi	r25, 0x09	; 9
    155e:	9c 87       	std	Y+12, r25	; 0x0c
    1560:	cb 84       	ldd	r12, Y+11	; 0x0b
    1562:	4c 2d       	mov	r20, r12
    1564:	42 95       	swap	r20
    1566:	40 7f       	andi	r20, 0xF0	; 240
    1568:	4c 0d       	add	r20, r12
    156a:	6a e1       	ldi	r22, 0x1A	; 26
    156c:	c4 01       	movw	r24, r8
    156e:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1572:	a1 2c       	mov	r10, r1
    1574:	ce 01       	movw	r24, r28
    1576:	0b 96       	adiw	r24, 0x0b	; 11
    1578:	7c 01       	movw	r14, r24
    157a:	8e 01       	movw	r16, r28
    157c:	06 5f       	subi	r16, 0xF6	; 246
    157e:	1f 4f       	sbci	r17, 0xFF	; 255
    1580:	92 01       	movw	r18, r4
    1582:	4c 85       	ldd	r20, Y+12	; 0x0c
    1584:	be 01       	movw	r22, r28
    1586:	6f 5f       	subi	r22, 0xFF	; 255
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	c4 01       	movw	r24, r8
    158c:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	09 f0       	breq	.+2      	; 0x1596 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    1594:	bf cf       	rjmp	.-130    	; 0x1514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x11a>
    1596:	6c e1       	ldi	r22, 0x1C	; 28
    1598:	c4 01       	movw	r24, r8
    159a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    159e:	85 fd       	sbrc	r24, 5
    15a0:	50 c0       	rjmp	.+160    	; 0x1642 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x248>
    15a2:	8f 71       	andi	r24, 0x1F	; 31
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ae>
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4d 2d       	mov	r20, r13
    15ae:	dd 0c       	add	r13, r13
    15b0:	55 0b       	sbc	r21, r21
    15b2:	42 17       	cp	r20, r18
    15b4:	53 07       	cpc	r21, r19
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c0>
    15b8:	46 c0       	rjmp	.+140    	; 0x1646 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    15ba:	d8 2e       	mov	r13, r24
    15bc:	85 95       	asr	r24
    15be:	85 95       	asr	r24
    15c0:	85 95       	asr	r24
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	98 0f       	add	r25, r24
    15c6:	42 2f       	mov	r20, r18
    15c8:	47 70       	andi	r20, 0x07	; 7
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1d6>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	89 0f       	add	r24, r25
    15d2:	e1 e0       	ldi	r30, 0x01	; 1
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	ec 0f       	add	r30, r28
    15d8:	fd 1f       	adc	r31, r29
    15da:	e8 0f       	add	r30, r24
    15dc:	f1 1d       	adc	r31, r1
    15de:	21 50       	subi	r18, 0x01	; 1
    15e0:	31 09       	sbc	r19, r1
    15e2:	27 70       	andi	r18, 0x07	; 7
    15e4:	33 27       	eor	r19, r19
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    15ec:	88 0f       	add	r24, r24
    15ee:	2a 95       	dec	r18
    15f0:	ea f7       	brpl	.-6      	; 0x15ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f2>
    15f2:	90 81       	ld	r25, Z
    15f4:	89 2b       	or	r24, r25
    15f6:	80 83       	st	Z, r24
    15f8:	8f e1       	ldi	r24, 0x1F	; 31
    15fa:	8d 15       	cp	r24, r13
    15fc:	0c f4       	brge	.+2      	; 0x1600 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
    15fe:	92 cf       	rjmp	.-220    	; 0x1524 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    1600:	9d 2d       	mov	r25, r13
    1602:	97 70       	andi	r25, 0x07	; 7
    1604:	9b 87       	std	Y+11, r25	; 0x0b
    1606:	8d 2d       	mov	r24, r13
    1608:	85 95       	asr	r24
    160a:	85 95       	asr	r24
    160c:	85 95       	asr	r24
    160e:	8e 5f       	subi	r24, 0xFE	; 254
    1610:	29 2f       	mov	r18, r25
    1612:	e0 e1       	ldi	r30, 0x10	; 16
    1614:	8e 9f       	mul	r24, r30
    1616:	20 0d       	add	r18, r0
    1618:	11 24       	eor	r1, r1
    161a:	2a 83       	std	Y+2, r18	; 0x02
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	91 11       	cpse	r25, r1
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22a>
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	28 0f       	add	r18, r24
    1626:	2c 87       	std	Y+12, r18	; 0x0c
    1628:	44 24       	eor	r4, r4
    162a:	43 94       	inc	r4
    162c:	51 2c       	mov	r5, r1
    162e:	4c 0e       	add	r4, r28
    1630:	5d 1e       	adc	r5, r29
    1632:	48 0e       	add	r4, r24
    1634:	51 1c       	adc	r5, r1
    1636:	f9 e0       	ldi	r31, 0x09	; 9
    1638:	f8 1b       	sub	r31, r24
    163a:	fa 87       	std	Y+10, r31	; 0x0a
    163c:	91 cf       	rjmp	.-222    	; 0x1560 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x166>
    163e:	86 e0       	ldi	r24, 0x06	; 6
    1640:	48 c0       	rjmp	.+144    	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	46 c0       	rjmp	.+140    	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	44 c0       	rjmp	.+136    	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 38       	cpi	r24, 0x88	; 136
    164e:	f1 f1       	breq	.+124    	; 0x16cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d2>
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	94 e0       	ldi	r25, 0x04	; 4
    1654:	eb 2d       	mov	r30, r11
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	31 96       	adiw	r30, 0x01	; 1
    165a:	e6 0d       	add	r30, r6
    165c:	f7 1d       	adc	r31, r7
    165e:	98 0f       	add	r25, r24
    1660:	a1 e0       	ldi	r26, 0x01	; 1
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ac 0f       	add	r26, r28
    1666:	bd 1f       	adc	r27, r29
    1668:	a8 0f       	add	r26, r24
    166a:	b1 1d       	adc	r27, r1
    166c:	2c 91       	ld	r18, X
    166e:	21 93       	st	Z+, r18
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	98 13       	cpse	r25, r24
    1674:	f5 cf       	rjmp	.-22     	; 0x1660 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x266>
    1676:	8a 85       	ldd	r24, Y+10	; 0x0a
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	21 f5       	brne	.+72     	; 0x16c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    167c:	8b 85       	ldd	r24, Y+11	; 0x0b
    167e:	81 11       	cpse	r24, r1
    1680:	21 c0       	rjmp	.+66     	; 0x16c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    1682:	9e 01       	movw	r18, r28
    1684:	2d 5f       	subi	r18, 0xFD	; 253
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	b2 01       	movw	r22, r4
    168c:	c4 01       	movw	r24, r8
    168e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    1692:	81 11       	cpse	r24, r1
    1694:	1e c0       	rjmp	.+60     	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	f2 01       	movw	r30, r4
    169a:	81 81       	ldd	r24, Z+1	; 0x01
    169c:	98 13       	cpse	r25, r24
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	98 13       	cpse	r25, r24
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    16a8:	80 81       	ld	r24, Z
    16aa:	82 ff       	sbrs	r24, 2
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2b8>
    16ae:	23 94       	inc	r2
    16b0:	ca ce       	rjmp	.-620    	; 0x1446 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    16b2:	f3 01       	movw	r30, r6
    16b4:	83 87       	std	Z+11, r24	; 0x0b
    16b6:	82 2d       	mov	r24, r2
    16b8:	88 0f       	add	r24, r24
    16ba:	82 0d       	add	r24, r2
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	80 83       	st	Z, r24
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    16c8:	87 e0       	ldi	r24, 0x07	; 7
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	93 e0       	ldi	r25, 0x03	; 3
    16d0:	c1 cf       	rjmp	.-126    	; 0x1654 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25a>
    16d2:	2c 96       	adiw	r28, 0x0c	; 12
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	df 90       	pop	r13
    16ec:	cf 90       	pop	r12
    16ee:	bf 90       	pop	r11
    16f0:	af 90       	pop	r10
    16f2:	9f 90       	pop	r9
    16f4:	8f 90       	pop	r8
    16f6:	7f 90       	pop	r7
    16f8:	6f 90       	pop	r6
    16fa:	5f 90       	pop	r5
    16fc:	4f 90       	pop	r4
    16fe:	3f 90       	pop	r3
    1700:	2f 90       	pop	r2
    1702:	08 95       	ret

00001704 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
    1704:	4f 92       	push	r4
    1706:	5f 92       	push	r5
    1708:	6f 92       	push	r6
    170a:	7f 92       	push	r7
    170c:	8f 92       	push	r8
    170e:	9f 92       	push	r9
    1710:	af 92       	push	r10
    1712:	cf 92       	push	r12
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	00 d0       	rcall	.+0      	; 0x1722 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x1e>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	6a 83       	std	Y+2, r22	; 0x02
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
    1728:	41 15       	cp	r20, r1
    172a:	51 05       	cpc	r21, r1
    172c:	39 f1       	breq	.+78     	; 0x177c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    172e:	f9 01       	movw	r30, r18
    1730:	60 81       	ld	r22, Z
    1732:	62 30       	cpi	r22, 0x02	; 2
    1734:	18 f1       	brcs	.+70     	; 0x177c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    1736:	49 01       	movw	r8, r18
    1738:	2a 01       	movw	r4, r20
    173a:	3c 01       	movw	r6, r24
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	6c e1       	ldi	r22, 0x1C	; 28
    1740:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	89 83       	std	Y+1, r24	; 0x01
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
    1748:	a1 2c       	mov	r10, r1
    174a:	c1 2c       	mov	r12, r1
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	7c 01       	movw	r14, r24
    1752:	84 01       	movw	r16, r8
    1754:	92 01       	movw	r18, r4
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	be 01       	movw	r22, r28
    175a:	6e 5f       	subi	r22, 0xFE	; 254
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	c3 01       	movw	r24, r6
    1760:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
    1764:	81 11       	cpse	r24, r1
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
    1768:	f4 01       	movw	r30, r8
    176a:	80 81       	ld	r24, Z
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	41 f4       	brne	.+16     	; 0x1780 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
											) {
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	99 81       	ldd	r25, Y+1	; 0x01
    1774:	91 11       	cpse	r25, r1
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    177c:	84 e0       	ldi	r24, 0x04	; 4
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
    1780:	81 e0       	ldi	r24, 0x01	; 1
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	cf 90       	pop	r12
    1794:	af 90       	pop	r10
    1796:	9f 90       	pop	r9
    1798:	8f 90       	pop	r8
    179a:	7f 90       	pop	r7
    179c:	6f 90       	pop	r6
    179e:	5f 90       	pop	r5
    17a0:	4f 90       	pop	r4
    17a2:	08 95       	ret

000017a4 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
    17a4:	9a 01       	movw	r18, r20
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
    17a6:	ab 01       	movw	r20, r22
    17a8:	66 e2       	ldi	r22, 0x26	; 38
    17aa:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000017ae <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    17b8:	1f 92       	push	r1
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8c 01       	movw	r16, r24
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	8b 83       	std	Y+3, r24	; 0x03

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	64 e2       	ldi	r22, 0x24	; 36
    17c8:	c8 01       	movw	r24, r16
    17ca:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	66 e2       	ldi	r22, 0x26	; 38
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    17d8:	46 e2       	ldi	r20, 0x26	; 38
    17da:	68 e4       	ldi	r22, 0x48	; 72
    17dc:	c8 01       	movw	r24, r16
    17de:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    17e2:	ae 01       	movw	r20, r28
    17e4:	4d 5f       	subi	r20, 0xFD	; 253
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	be 01       	movw	r22, r28
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	c8 01       	movw	r24, r16
    17f0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    17f4:	98 2f       	mov	r25, r24
	return (result == STATUS_OK || result == STATUS_COLLISION);
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	99 23       	and	r25, r25
    17fa:	19 f0       	breq	.+6      	; 0x1802 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    17fc:	92 30       	cpi	r25, 0x02	; 2
    17fe:	09 f0       	breq	.+2      	; 0x1802 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    1800:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	2f 93       	push	r18
    181e:	8f 93       	push	r24
    1820:	9f 93       	push	r25
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <Serial+0x10>
    182a:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <Serial+0x11>
    182e:	80 81       	ld	r24, Z
    1830:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <Serial+0x16>
    1834:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <Serial+0x17>
    1838:	82 fd       	sbrc	r24, 2
    183a:	12 c0       	rjmp	.+36     	; 0x1860 <__vector_18+0x4e>
    183c:	90 81       	ld	r25, Z
    183e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Serial+0x19>
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8f 73       	andi	r24, 0x3F	; 63
    1846:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <Serial+0x1a>
    184a:	82 17       	cp	r24, r18
    184c:	51 f0       	breq	.+20     	; 0x1862 <__vector_18+0x50>
    184e:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <Serial+0x19>
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	e6 52       	subi	r30, 0x26	; 38
    1856:	fe 4f       	sbci	r31, 0xFE	; 254
    1858:	95 8f       	std	Z+29, r25	; 0x1d
    185a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Serial+0x19>
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <__vector_18+0x50>
    1860:	80 81       	ld	r24, Z
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_19>:
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	8a ed       	ldi	r24, 0xDA	; 218
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    18c2:	ea ed       	ldi	r30, 0xDA	; 218
    18c4:	f1 e0       	ldi	r31, 0x01	; 1
    18c6:	13 82       	std	Z+3, r1	; 0x03
    18c8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    18ca:	88 ee       	ldi	r24, 0xE8	; 232
    18cc:	93 e0       	ldi	r25, 0x03	; 3
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	84 83       	std	Z+4, r24	; 0x04
    18d4:	95 83       	std	Z+5, r25	; 0x05
    18d6:	a6 83       	std	Z+6, r26	; 0x06
    18d8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    18da:	83 e4       	ldi	r24, 0x43	; 67
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	85 ec       	ldi	r24, 0xC5	; 197
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	95 87       	std	Z+13, r25	; 0x0d
    18e8:	84 87       	std	Z+12, r24	; 0x0c
    18ea:	84 ec       	ldi	r24, 0xC4	; 196
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	97 87       	std	Z+15, r25	; 0x0f
    18f0:	86 87       	std	Z+14, r24	; 0x0e
    18f2:	80 ec       	ldi	r24, 0xC0	; 192
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	91 8b       	std	Z+17, r25	; 0x11
    18f8:	80 8b       	std	Z+16, r24	; 0x10
    18fa:	81 ec       	ldi	r24, 0xC1	; 193
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	93 8b       	std	Z+19, r25	; 0x13
    1900:	82 8b       	std	Z+18, r24	; 0x12
    1902:	82 ec       	ldi	r24, 0xC2	; 194
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	95 8b       	std	Z+21, r25	; 0x15
    1908:	84 8b       	std	Z+20, r24	; 0x14
    190a:	86 ec       	ldi	r24, 0xC6	; 198
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	97 8b       	std	Z+23, r25	; 0x17
    1910:	86 8b       	std	Z+22, r24	; 0x16
    1912:	11 8e       	std	Z+25, r1	; 0x19
    1914:	12 8e       	std	Z+26, r1	; 0x1a
    1916:	13 8e       	std	Z+27, r1	; 0x1b
    1918:	14 8e       	std	Z+28, r1	; 0x1c
    191a:	08 95       	ret

0000191c <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    191c:	1f 92       	push	r1
    191e:	0f 92       	push	r0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1932:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer0_millis>
    1936:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <timer0_millis+0x1>
    193a:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <timer0_millis+0x2>
    193e:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1942:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1946:	23 e0       	ldi	r18, 0x03	; 3
    1948:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    194a:	2d 37       	cpi	r18, 0x7D	; 125
    194c:	20 f4       	brcc	.+8      	; 0x1956 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	a1 1d       	adc	r26, r1
    1952:	b1 1d       	adc	r27, r1
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1956:	26 e8       	ldi	r18, 0x86	; 134
    1958:	23 0f       	add	r18, r19
		m += 1;
    195a:	02 96       	adiw	r24, 0x02	; 2
    195c:	a1 1d       	adc	r26, r1
    195e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1960:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <timer0_fract>
	timer0_millis = m;
    1964:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <timer0_millis>
    1968:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <timer0_millis+0x1>
    196c:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <timer0_millis+0x2>
    1970:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <timer0_millis+0x3>
	timer0_overflow_count++;
    1974:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <timer0_overflow_count>
    1978:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <timer0_overflow_count+0x1>
    197c:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <timer0_overflow_count+0x2>
    1980:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <timer0_overflow_count+0x3>
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	a1 1d       	adc	r26, r1
    1988:	b1 1d       	adc	r27, r1
    198a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <timer0_overflow_count>
    198e:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <timer0_overflow_count+0x1>
    1992:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <timer0_overflow_count+0x2>
    1996:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <timer0_overflow_count+0x3>
}
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    19b0:	fc 01       	movw	r30, r24
    19b2:	91 8d       	ldd	r25, Z+25	; 0x19
    19b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    19b6:	89 2f       	mov	r24, r25
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	80 5c       	subi	r24, 0xC0	; 192
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	82 1b       	sub	r24, r18
    19c0:	91 09       	sbc	r25, r1
    19c2:	8f 73       	andi	r24, 0x3F	; 63
    19c4:	99 27       	eor	r25, r25
    19c6:	08 95       	ret

000019c8 <_ZN14HardwareSerial4peekEv>:
    19c8:	fc 01       	movw	r30, r24
    19ca:	91 8d       	ldd	r25, Z+25	; 0x19
    19cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    19ce:	98 17       	cp	r25, r24
    19d0:	31 f0       	breq	.+12     	; 0x19de <_ZN14HardwareSerial4peekEv+0x16>
    19d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    19d4:	e8 0f       	add	r30, r24
    19d6:	f1 1d       	adc	r31, r1
    19d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	08 95       	ret
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	9f ef       	ldi	r25, 0xFF	; 255
    19e2:	08 95       	ret

000019e4 <_ZN14HardwareSerial4readEv>:
    19e4:	fc 01       	movw	r30, r24
    19e6:	91 8d       	ldd	r25, Z+25	; 0x19
    19e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    19ea:	98 17       	cp	r25, r24
    19ec:	61 f0       	breq	.+24     	; 0x1a06 <_ZN14HardwareSerial4readEv+0x22>
    19ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    19f0:	df 01       	movw	r26, r30
    19f2:	a8 0f       	add	r26, r24
    19f4:	b1 1d       	adc	r27, r1
    19f6:	5d 96       	adiw	r26, 0x1d	; 29
    19f8:	8c 91       	ld	r24, X
    19fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    19fc:	9f 5f       	subi	r25, 0xFF	; 255
    19fe:	9f 73       	andi	r25, 0x3F	; 63
    1a00:	92 8f       	std	Z+26, r25	; 0x1a
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	08 95       	ret
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	9f ef       	ldi	r25, 0xFF	; 255
    1a0a:	08 95       	ret

00001a0c <_ZN14HardwareSerial17availableForWriteEv>:
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1a10:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a12:	25 2f       	mov	r18, r21
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	84 2f       	mov	r24, r20
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	82 1b       	sub	r24, r18
    1a1c:	93 0b       	sbc	r25, r19
    1a1e:	54 17       	cp	r21, r20
    1a20:	10 f0       	brcs	.+4      	; 0x1a26 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1a22:	cf 96       	adiw	r24, 0x3f	; 63
    1a24:	08 95       	ret
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	08 95       	ret

00001a2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a2a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a2c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a2e:	df 01       	movw	r26, r30
    1a30:	a8 0f       	add	r26, r24
    1a32:	b1 1d       	adc	r27, r1
    1a34:	a3 5a       	subi	r26, 0xA3	; 163
    1a36:	bf 4f       	sbci	r27, 0xFF	; 255
    1a38:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a3a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	8f 73       	andi	r24, 0x3F	; 63
    1a42:	99 27       	eor	r25, r25
    1a44:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1a46:	a6 89       	ldd	r26, Z+22	; 0x16
    1a48:	b7 89       	ldd	r27, Z+23	; 0x17
    1a4a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a4c:	a0 89       	ldd	r26, Z+16	; 0x10
    1a4e:	b1 89       	ldd	r27, Z+17	; 0x11
    1a50:	8c 91       	ld	r24, X
    1a52:	83 70       	andi	r24, 0x03	; 3
    1a54:	80 64       	ori	r24, 0x40	; 64
    1a56:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a58:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a5a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a5c:	98 13       	cpse	r25, r24
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a60:	02 88       	ldd	r0, Z+18	; 0x12
    1a62:	f3 89       	ldd	r31, Z+19	; 0x13
    1a64:	e0 2d       	mov	r30, r0
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 7d       	andi	r24, 0xDF	; 223
    1a6a:	80 83       	st	Z, r24
    1a6c:	08 95       	ret

00001a6e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	ec 01       	movw	r28, r24
  _written = true;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a84:	98 13       	cpse	r25, r24
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <_ZN14HardwareSerial5writeEh+0x24>
    1a88:	e8 89       	ldd	r30, Y+16	; 0x10
    1a8a:	f9 89       	ldd	r31, Y+17	; 0x11
    1a8c:	80 81       	ld	r24, Z
    1a8e:	85 fd       	sbrc	r24, 5
    1a90:	26 c0       	rjmp	.+76     	; 0x1ade <_ZN14HardwareSerial5writeEh+0x70>
    1a92:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a94:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a96:	10 e0       	ldi	r17, 0x00	; 0
    1a98:	0f 5f       	subi	r16, 0xFF	; 255
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	0f 73       	andi	r16, 0x3F	; 63
    1a9e:	11 27       	eor	r17, r17
    1aa0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aa4:	e8 12       	cpse	r14, r24
    1aa6:	0c c0       	rjmp	.+24     	; 0x1ac0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	07 fc       	sbrc	r0, 7
    1aac:	fa cf       	rjmp	.-12     	; 0x1aa2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1aae:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab2:	80 81       	ld	r24, Z
    1ab4:	85 ff       	sbrs	r24, 5
    1ab6:	f5 cf       	rjmp	.-22     	; 0x1aa2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ab8:	ce 01       	movw	r24, r28
    1aba:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1abe:	f1 cf       	rjmp	.-30     	; 0x1aa2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f1 1d       	adc	r31, r1
    1ac8:	e3 5a       	subi	r30, 0xA3	; 163
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1ace:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ad0:	f8 94       	cli
    _tx_buffer_head = i;
    1ad2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1ad4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ad6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 62       	ori	r24, 0x20	; 32
    1adc:	0a c0       	rjmp	.+20     	; 0x1af2 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1ade:	9f b7       	in	r25, 0x3f	; 63
    1ae0:	f8 94       	cli
      *_udr = c;
    1ae2:	ee 89       	ldd	r30, Y+22	; 0x16
    1ae4:	ff 89       	ldd	r31, Y+23	; 0x17
    1ae6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ae8:	e8 89       	ldd	r30, Y+16	; 0x10
    1aea:	f9 89       	ldd	r31, Y+17	; 0x11
    1aec:	80 81       	ld	r24, Z
    1aee:	83 70       	andi	r24, 0x03	; 3
    1af0:	80 64       	ori	r24, 0x40	; 64
    1af2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1af4:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	08 95       	ret

00001b08 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b0e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b10:	88 23       	and	r24, r24
    1b12:	c9 f0       	breq	.+50     	; 0x1b46 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b14:	ea 89       	ldd	r30, Y+18	; 0x12
    1b16:	fb 89       	ldd	r31, Y+19	; 0x13
    1b18:	80 81       	ld	r24, Z
    1b1a:	85 fd       	sbrc	r24, 5
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <_ZN14HardwareSerial5flushEv+0x20>
    1b1e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b20:	b9 89       	ldd	r27, Y+17	; 0x11
    1b22:	8c 91       	ld	r24, X
    1b24:	86 fd       	sbrc	r24, 6
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	07 fc       	sbrc	r0, 7
    1b2c:	f5 cf       	rjmp	.-22     	; 0x1b18 <_ZN14HardwareSerial5flushEv+0x10>
    1b2e:	80 81       	ld	r24, Z
    1b30:	85 ff       	sbrs	r24, 5
    1b32:	f2 cf       	rjmp	.-28     	; 0x1b18 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1b34:	a8 89       	ldd	r26, Y+16	; 0x10
    1b36:	b9 89       	ldd	r27, Y+17	; 0x11
    1b38:	8c 91       	ld	r24, X
    1b3a:	85 ff       	sbrs	r24, 5
    1b3c:	ed cf       	rjmp	.-38     	; 0x1b18 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1b3e:	ce 01       	movw	r24, r28
    1b40:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b44:	e7 cf       	rjmp	.-50     	; 0x1b14 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <__divmodhi4>:
    1b4c:	97 fb       	bst	r25, 7
    1b4e:	07 2e       	mov	r0, r23
    1b50:	16 f4       	brtc	.+4      	; 0x1b56 <__divmodhi4+0xa>
    1b52:	00 94       	com	r0
    1b54:	07 d0       	rcall	.+14     	; 0x1b64 <__divmodhi4_neg1>
    1b56:	77 fd       	sbrc	r23, 7
    1b58:	09 d0       	rcall	.+18     	; 0x1b6c <__divmodhi4_neg2>
    1b5a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__udivmodhi4>
    1b5e:	07 fc       	sbrc	r0, 7
    1b60:	05 d0       	rcall	.+10     	; 0x1b6c <__divmodhi4_neg2>
    1b62:	3e f4       	brtc	.+14     	; 0x1b72 <__divmodhi4_exit>

00001b64 <__divmodhi4_neg1>:
    1b64:	90 95       	com	r25
    1b66:	81 95       	neg	r24
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	08 95       	ret

00001b6c <__divmodhi4_neg2>:
    1b6c:	70 95       	com	r23
    1b6e:	61 95       	neg	r22
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255

00001b72 <__divmodhi4_exit>:
    1b72:	08 95       	ret

00001b74 <__udivmodsi4>:
    1b74:	a1 e2       	ldi	r26, 0x21	; 33
    1b76:	1a 2e       	mov	r1, r26
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	fd 01       	movw	r30, r26
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <__udivmodsi4_ep>

00001b80 <__udivmodsi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	ee 1f       	adc	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	a2 17       	cp	r26, r18
    1b8a:	b3 07       	cpc	r27, r19
    1b8c:	e4 07       	cpc	r30, r20
    1b8e:	f5 07       	cpc	r31, r21
    1b90:	20 f0       	brcs	.+8      	; 0x1b9a <__udivmodsi4_ep>
    1b92:	a2 1b       	sub	r26, r18
    1b94:	b3 0b       	sbc	r27, r19
    1b96:	e4 0b       	sbc	r30, r20
    1b98:	f5 0b       	sbc	r31, r21

00001b9a <__udivmodsi4_ep>:
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	1a 94       	dec	r1
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <__udivmodsi4_loop>
    1ba6:	60 95       	com	r22
    1ba8:	70 95       	com	r23
    1baa:	80 95       	com	r24
    1bac:	90 95       	com	r25
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	bd 01       	movw	r22, r26
    1bb4:	cf 01       	movw	r24, r30
    1bb6:	08 95       	ret

00001bb8 <__divmodsi4>:
    1bb8:	05 2e       	mov	r0, r21
    1bba:	97 fb       	bst	r25, 7
    1bbc:	1e f4       	brtc	.+6      	; 0x1bc4 <__divmodsi4+0xc>
    1bbe:	00 94       	com	r0
    1bc0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__negsi2>
    1bc4:	57 fd       	sbrc	r21, 7
    1bc6:	07 d0       	rcall	.+14     	; 0x1bd6 <__divmodsi4_neg2>
    1bc8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__udivmodsi4>
    1bcc:	07 fc       	sbrc	r0, 7
    1bce:	03 d0       	rcall	.+6      	; 0x1bd6 <__divmodsi4_neg2>
    1bd0:	4e f4       	brtc	.+18     	; 0x1be4 <__divmodsi4_exit>
    1bd2:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__negsi2>

00001bd6 <__divmodsi4_neg2>:
    1bd6:	50 95       	com	r21
    1bd8:	40 95       	com	r20
    1bda:	30 95       	com	r19
    1bdc:	21 95       	neg	r18
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	4f 4f       	sbci	r20, 0xFF	; 255
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255

00001be4 <__divmodsi4_exit>:
    1be4:	08 95       	ret

00001be6 <__negsi2>:
    1be6:	90 95       	com	r25
    1be8:	80 95       	com	r24
    1bea:	70 95       	com	r23
    1bec:	61 95       	neg	r22
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	08 95       	ret

00001bf6 <__tablejump2__>:
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	05 90       	lpm	r0, Z+
    1bfc:	f4 91       	lpm	r31, Z
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	09 94       	ijmp

00001c02 <__muluhisi3>:
    1c02:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__umulhisi3>
    1c06:	a5 9f       	mul	r26, r21
    1c08:	90 0d       	add	r25, r0
    1c0a:	b4 9f       	mul	r27, r20
    1c0c:	90 0d       	add	r25, r0
    1c0e:	a4 9f       	mul	r26, r20
    1c10:	80 0d       	add	r24, r0
    1c12:	91 1d       	adc	r25, r1
    1c14:	11 24       	eor	r1, r1
    1c16:	08 95       	ret

00001c18 <__udivmodhi4>:
    1c18:	aa 1b       	sub	r26, r26
    1c1a:	bb 1b       	sub	r27, r27
    1c1c:	51 e1       	ldi	r21, 0x11	; 17
    1c1e:	07 c0       	rjmp	.+14     	; 0x1c2e <__udivmodhi4_ep>

00001c20 <__udivmodhi4_loop>:
    1c20:	aa 1f       	adc	r26, r26
    1c22:	bb 1f       	adc	r27, r27
    1c24:	a6 17       	cp	r26, r22
    1c26:	b7 07       	cpc	r27, r23
    1c28:	10 f0       	brcs	.+4      	; 0x1c2e <__udivmodhi4_ep>
    1c2a:	a6 1b       	sub	r26, r22
    1c2c:	b7 0b       	sbc	r27, r23

00001c2e <__udivmodhi4_ep>:
    1c2e:	88 1f       	adc	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	5a 95       	dec	r21
    1c34:	a9 f7       	brne	.-22     	; 0x1c20 <__udivmodhi4_loop>
    1c36:	80 95       	com	r24
    1c38:	90 95       	com	r25
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	08 95       	ret

00001c40 <__umulhisi3>:
    1c40:	a2 9f       	mul	r26, r18
    1c42:	b0 01       	movw	r22, r0
    1c44:	b3 9f       	mul	r27, r19
    1c46:	c0 01       	movw	r24, r0
    1c48:	a3 9f       	mul	r26, r19
    1c4a:	70 0d       	add	r23, r0
    1c4c:	81 1d       	adc	r24, r1
    1c4e:	11 24       	eor	r1, r1
    1c50:	91 1d       	adc	r25, r1
    1c52:	b2 9f       	mul	r27, r18
    1c54:	70 0d       	add	r23, r0
    1c56:	81 1d       	adc	r24, r1
    1c58:	11 24       	eor	r1, r1
    1c5a:	91 1d       	adc	r25, r1
    1c5c:	08 95       	ret

00001c5e <__do_global_dtors>:
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	c4 e6       	ldi	r28, 0x64	; 100
    1c62:	d0 e0       	ldi	r29, 0x00	; 0
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__do_global_dtors+0x10>
    1c66:	fe 01       	movw	r30, r28
    1c68:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__tablejump2__>
    1c6c:	21 96       	adiw	r28, 0x01	; 1
    1c6e:	c5 36       	cpi	r28, 0x65	; 101
    1c70:	d1 07       	cpc	r29, r17
    1c72:	c9 f7       	brne	.-14     	; 0x1c66 <__do_global_dtors+0x8>
    1c74:	f8 94       	cli

00001c76 <__stop_program>:
    1c76:	ff cf       	rjmp	.-2      	; 0x1c76 <__stop_program>
